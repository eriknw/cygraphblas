# This file is automatically generated
# GrB methods
cdef Col_assign_SS(
    Matrix C,
    Vector mask,
    BinaryOp accum,
    Vector u,
    Index *I,
    Index ni,
    Index j,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Col_assign(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if u is None else <GrB_Vector>u.obj,
        I,
        ni,
        j,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Col_extract_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    Matrix A,
    Index *I,
    Index ni,
    Index j,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Col_extract(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        I,
        ni,
        j,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Descriptor_set_SS(
    Descriptor desc,
    Desc_Field field,
    Desc_Value val,
):
    cdef GrB_Info result = GrB_Descriptor_set(
        NULL if desc is None else desc.ss_obj,
        <GrB_Desc_Field>field.ss_obj,
        <GrB_Desc_Value>val.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_apply_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    UnaryOp op,
    Matrix A,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_apply(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_apply_BinaryOp1st_BOOL_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    BinaryOp op,
    bint x,
    Matrix A,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_apply_BinaryOp1st_BOOL(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        x,
        NULL if A is None else <GrB_Matrix>A.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_apply_BinaryOp1st_FP32_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    BinaryOp op,
    float x,
    Matrix A,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_apply_BinaryOp1st_FP32(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        x,
        NULL if A is None else <GrB_Matrix>A.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_apply_BinaryOp1st_FP64_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    BinaryOp op,
    double x,
    Matrix A,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_apply_BinaryOp1st_FP64(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        x,
        NULL if A is None else <GrB_Matrix>A.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_apply_BinaryOp1st_INT8_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    BinaryOp op,
    int8_t x,
    Matrix A,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_apply_BinaryOp1st_INT8(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        x,
        NULL if A is None else <GrB_Matrix>A.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_apply_BinaryOp1st_INT16_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    BinaryOp op,
    int16_t x,
    Matrix A,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_apply_BinaryOp1st_INT16(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        x,
        NULL if A is None else <GrB_Matrix>A.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_apply_BinaryOp1st_INT32_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    BinaryOp op,
    int32_t x,
    Matrix A,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_apply_BinaryOp1st_INT32(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        x,
        NULL if A is None else <GrB_Matrix>A.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_apply_BinaryOp1st_INT64_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    BinaryOp op,
    int64_t x,
    Matrix A,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_apply_BinaryOp1st_INT64(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        x,
        NULL if A is None else <GrB_Matrix>A.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_apply_BinaryOp1st_UINT8_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    BinaryOp op,
    uint8_t x,
    Matrix A,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_apply_BinaryOp1st_UINT8(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        x,
        NULL if A is None else <GrB_Matrix>A.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_apply_BinaryOp1st_UINT16_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    BinaryOp op,
    uint16_t x,
    Matrix A,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_apply_BinaryOp1st_UINT16(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        x,
        NULL if A is None else <GrB_Matrix>A.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_apply_BinaryOp1st_UINT32_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    BinaryOp op,
    uint32_t x,
    Matrix A,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_apply_BinaryOp1st_UINT32(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        x,
        NULL if A is None else <GrB_Matrix>A.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_apply_BinaryOp1st_UINT64_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    BinaryOp op,
    uint64_t x,
    Matrix A,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_apply_BinaryOp1st_UINT64(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        x,
        NULL if A is None else <GrB_Matrix>A.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_apply_BinaryOp2nd_BOOL_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    BinaryOp op,
    Matrix A,
    bint y,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_apply_BinaryOp2nd_BOOL(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        y,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_apply_BinaryOp2nd_FP32_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    BinaryOp op,
    Matrix A,
    float y,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_apply_BinaryOp2nd_FP32(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        y,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_apply_BinaryOp2nd_FP64_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    BinaryOp op,
    Matrix A,
    double y,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_apply_BinaryOp2nd_FP64(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        y,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_apply_BinaryOp2nd_INT8_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    BinaryOp op,
    Matrix A,
    int8_t y,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_apply_BinaryOp2nd_INT8(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        y,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_apply_BinaryOp2nd_INT16_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    BinaryOp op,
    Matrix A,
    int16_t y,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_apply_BinaryOp2nd_INT16(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        y,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_apply_BinaryOp2nd_INT32_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    BinaryOp op,
    Matrix A,
    int32_t y,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_apply_BinaryOp2nd_INT32(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        y,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_apply_BinaryOp2nd_INT64_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    BinaryOp op,
    Matrix A,
    int64_t y,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_apply_BinaryOp2nd_INT64(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        y,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_apply_BinaryOp2nd_UINT8_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    BinaryOp op,
    Matrix A,
    uint8_t y,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_apply_BinaryOp2nd_UINT8(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        y,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_apply_BinaryOp2nd_UINT16_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    BinaryOp op,
    Matrix A,
    uint16_t y,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_apply_BinaryOp2nd_UINT16(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        y,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_apply_BinaryOp2nd_UINT32_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    BinaryOp op,
    Matrix A,
    uint32_t y,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_apply_BinaryOp2nd_UINT32(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        y,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_apply_BinaryOp2nd_UINT64_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    BinaryOp op,
    Matrix A,
    uint64_t y,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_apply_BinaryOp2nd_UINT64(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        y,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_assign_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    Matrix A,
    Index *I,
    Index ni,
    Index *J,
    Index nj,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_assign(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        I,
        ni,
        J,
        nj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_assign_BOOL_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    bint x,
    Index *I,
    Index ni,
    Index *J,
    Index nj,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_assign_BOOL(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        J,
        nj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_assign_FP32_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    float x,
    Index *I,
    Index ni,
    Index *J,
    Index nj,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_assign_FP32(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        J,
        nj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_assign_FP64_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    double x,
    Index *I,
    Index ni,
    Index *J,
    Index nj,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_assign_FP64(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        J,
        nj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_assign_INT8_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    int8_t x,
    Index *I,
    Index ni,
    Index *J,
    Index nj,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_assign_INT8(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        J,
        nj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_assign_INT16_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    int16_t x,
    Index *I,
    Index ni,
    Index *J,
    Index nj,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_assign_INT16(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        J,
        nj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_assign_INT32_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    int32_t x,
    Index *I,
    Index ni,
    Index *J,
    Index nj,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_assign_INT32(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        J,
        nj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_assign_INT64_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    int64_t x,
    Index *I,
    Index ni,
    Index *J,
    Index nj,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_assign_INT64(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        J,
        nj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_assign_UINT8_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    uint8_t x,
    Index *I,
    Index ni,
    Index *J,
    Index nj,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_assign_UINT8(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        J,
        nj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_assign_UINT16_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    uint16_t x,
    Index *I,
    Index ni,
    Index *J,
    Index nj,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_assign_UINT16(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        J,
        nj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_assign_UINT32_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    uint32_t x,
    Index *I,
    Index ni,
    Index *J,
    Index nj,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_assign_UINT32(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        J,
        nj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_assign_UINT64_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    uint64_t x,
    Index *I,
    Index ni,
    Index *J,
    Index nj,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_assign_UINT64(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        J,
        nj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_build_BOOL_SS(
    Matrix C,
    Index *I,
    Index *J,
    bint *X,
    Index nvals,
    BinaryOp dup,
):
    cdef GrB_Info result = GrB_Matrix_build_BOOL(
        NULL if C is None else <GrB_Matrix>C.obj,
        I,
        J,
        X,
        nvals,
        NULL if dup is None else dup.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_build_FP32_SS(
    Matrix C,
    Index *I,
    Index *J,
    float *X,
    Index nvals,
    BinaryOp dup,
):
    cdef GrB_Info result = GrB_Matrix_build_FP32(
        NULL if C is None else <GrB_Matrix>C.obj,
        I,
        J,
        X,
        nvals,
        NULL if dup is None else dup.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_build_FP64_SS(
    Matrix C,
    Index *I,
    Index *J,
    double *X,
    Index nvals,
    BinaryOp dup,
):
    cdef GrB_Info result = GrB_Matrix_build_FP64(
        NULL if C is None else <GrB_Matrix>C.obj,
        I,
        J,
        X,
        nvals,
        NULL if dup is None else dup.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_build_INT8_SS(
    Matrix C,
    Index *I,
    Index *J,
    int8_t *X,
    Index nvals,
    BinaryOp dup,
):
    cdef GrB_Info result = GrB_Matrix_build_INT8(
        NULL if C is None else <GrB_Matrix>C.obj,
        I,
        J,
        X,
        nvals,
        NULL if dup is None else dup.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_build_INT16_SS(
    Matrix C,
    Index *I,
    Index *J,
    int16_t *X,
    Index nvals,
    BinaryOp dup,
):
    cdef GrB_Info result = GrB_Matrix_build_INT16(
        NULL if C is None else <GrB_Matrix>C.obj,
        I,
        J,
        X,
        nvals,
        NULL if dup is None else dup.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_build_INT32_SS(
    Matrix C,
    Index *I,
    Index *J,
    int32_t *X,
    Index nvals,
    BinaryOp dup,
):
    cdef GrB_Info result = GrB_Matrix_build_INT32(
        NULL if C is None else <GrB_Matrix>C.obj,
        I,
        J,
        X,
        nvals,
        NULL if dup is None else dup.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_build_INT64_SS(
    Matrix C,
    Index *I,
    Index *J,
    int64_t *X,
    Index nvals,
    BinaryOp dup,
):
    cdef GrB_Info result = GrB_Matrix_build_INT64(
        NULL if C is None else <GrB_Matrix>C.obj,
        I,
        J,
        X,
        nvals,
        NULL if dup is None else dup.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_build_UINT8_SS(
    Matrix C,
    Index *I,
    Index *J,
    uint8_t *X,
    Index nvals,
    BinaryOp dup,
):
    cdef GrB_Info result = GrB_Matrix_build_UINT8(
        NULL if C is None else <GrB_Matrix>C.obj,
        I,
        J,
        X,
        nvals,
        NULL if dup is None else dup.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_build_UINT16_SS(
    Matrix C,
    Index *I,
    Index *J,
    uint16_t *X,
    Index nvals,
    BinaryOp dup,
):
    cdef GrB_Info result = GrB_Matrix_build_UINT16(
        NULL if C is None else <GrB_Matrix>C.obj,
        I,
        J,
        X,
        nvals,
        NULL if dup is None else dup.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_build_UINT32_SS(
    Matrix C,
    Index *I,
    Index *J,
    uint32_t *X,
    Index nvals,
    BinaryOp dup,
):
    cdef GrB_Info result = GrB_Matrix_build_UINT32(
        NULL if C is None else <GrB_Matrix>C.obj,
        I,
        J,
        X,
        nvals,
        NULL if dup is None else dup.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_build_UINT64_SS(
    Matrix C,
    Index *I,
    Index *J,
    uint64_t *X,
    Index nvals,
    BinaryOp dup,
):
    cdef GrB_Info result = GrB_Matrix_build_UINT64(
        NULL if C is None else <GrB_Matrix>C.obj,
        I,
        J,
        X,
        nvals,
        NULL if dup is None else dup.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_clear_SS(
    Matrix A,
):
    cdef GrB_Info result = GrB_Matrix_clear(
        NULL if A is None else <GrB_Matrix>A.obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_dup_SS(
    Matrix C,
    Matrix A,
):
    cdef GrB_Info result = GrB_Matrix_dup(
        NULL if C is None else <GrB_Matrix*>&C.obj,
        NULL if A is None else <GrB_Matrix>A.obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_eWiseAdd_BinaryOp_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    BinaryOp add,
    Matrix A,
    Matrix B,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_eWiseAdd_BinaryOp(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if add is None else add.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        NULL if B is None else <GrB_Matrix>B.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_eWiseAdd_Monoid_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    Monoid monoid,
    Matrix A,
    Matrix B,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_eWiseAdd_Monoid(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if monoid is None else monoid.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        NULL if B is None else <GrB_Matrix>B.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_eWiseAdd_Semiring_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    Semiring semiring,
    Matrix A,
    Matrix B,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_eWiseAdd_Semiring(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if semiring is None else semiring.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        NULL if B is None else <GrB_Matrix>B.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_eWiseMult_BinaryOp_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    BinaryOp mult,
    Matrix A,
    Matrix B,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_eWiseMult_BinaryOp(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if mult is None else mult.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        NULL if B is None else <GrB_Matrix>B.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_eWiseMult_Monoid_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    Monoid monoid,
    Matrix A,
    Matrix B,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_eWiseMult_Monoid(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if monoid is None else monoid.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        NULL if B is None else <GrB_Matrix>B.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_eWiseMult_Semiring_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    Semiring semiring,
    Matrix A,
    Matrix B,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_eWiseMult_Semiring(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if semiring is None else semiring.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        NULL if B is None else <GrB_Matrix>B.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_extract_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    Matrix A,
    Index *I,
    Index ni,
    Index *J,
    Index nj,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_extract(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        I,
        ni,
        J,
        nj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_free_SS(
    Matrix A,
):
    cdef GrB_Info result = GrB_Matrix_free(
        NULL if A is None else <GrB_Matrix*>&A.obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_kronecker_BinaryOp_SS(
    Matrix C,
    Matrix M,
    BinaryOp accum,
    BinaryOp op,
    Matrix A,
    Matrix B,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_kronecker_BinaryOp(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if M is None else <GrB_Matrix>M.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        NULL if B is None else <GrB_Matrix>B.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_kronecker_Monoid_SS(
    Matrix C,
    Matrix M,
    BinaryOp accum,
    Monoid monoid,
    Matrix A,
    Matrix B,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_kronecker_Monoid(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if M is None else <GrB_Matrix>M.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if monoid is None else monoid.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        NULL if B is None else <GrB_Matrix>B.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_kronecker_Semiring_SS(
    Matrix C,
    Matrix M,
    BinaryOp accum,
    Semiring semiring,
    Matrix A,
    Matrix B,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_kronecker_Semiring(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if M is None else <GrB_Matrix>M.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if semiring is None else semiring.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        NULL if B is None else <GrB_Matrix>B.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_new_SS(
    Matrix A,
    Type type,
    Index nrows,
    Index ncols,
):
    cdef GrB_Info result = GrB_Matrix_new(
        NULL if A is None else <GrB_Matrix*>&A.obj,
        NULL if type is None else type.ss_obj,
        nrows,
        ncols,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_reduce_BinaryOp_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    BinaryOp op,
    Matrix A,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_reduce_BinaryOp(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_reduce_Monoid_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    Monoid monoid,
    Matrix A,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Matrix_reduce_Monoid(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if monoid is None else monoid.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_removeElement_SS(
    Matrix C,
    Index i,
    Index j,
):
    cdef GrB_Info result = GrB_Matrix_removeElement(
        NULL if C is None else <GrB_Matrix>C.obj,
        i,
        j,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_resize_SS(
    Matrix C,
    Index nrows_new,
    Index ncols_new,
):
    cdef GrB_Info result = GrB_Matrix_resize(
        NULL if C is None else <GrB_Matrix>C.obj,
        nrows_new,
        ncols_new,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_setElement_BOOL_SS(
    Matrix C,
    bint x,
    Index i,
    Index j,
):
    cdef GrB_Info result = GrB_Matrix_setElement_BOOL(
        NULL if C is None else <GrB_Matrix>C.obj,
        x,
        i,
        j,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_setElement_FP32_SS(
    Matrix C,
    float x,
    Index i,
    Index j,
):
    cdef GrB_Info result = GrB_Matrix_setElement_FP32(
        NULL if C is None else <GrB_Matrix>C.obj,
        x,
        i,
        j,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_setElement_FP64_SS(
    Matrix C,
    double x,
    Index i,
    Index j,
):
    cdef GrB_Info result = GrB_Matrix_setElement_FP64(
        NULL if C is None else <GrB_Matrix>C.obj,
        x,
        i,
        j,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_setElement_INT8_SS(
    Matrix C,
    int8_t x,
    Index i,
    Index j,
):
    cdef GrB_Info result = GrB_Matrix_setElement_INT8(
        NULL if C is None else <GrB_Matrix>C.obj,
        x,
        i,
        j,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_setElement_INT16_SS(
    Matrix C,
    int16_t x,
    Index i,
    Index j,
):
    cdef GrB_Info result = GrB_Matrix_setElement_INT16(
        NULL if C is None else <GrB_Matrix>C.obj,
        x,
        i,
        j,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_setElement_INT32_SS(
    Matrix C,
    int32_t x,
    Index i,
    Index j,
):
    cdef GrB_Info result = GrB_Matrix_setElement_INT32(
        NULL if C is None else <GrB_Matrix>C.obj,
        x,
        i,
        j,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_setElement_INT64_SS(
    Matrix C,
    int64_t x,
    Index i,
    Index j,
):
    cdef GrB_Info result = GrB_Matrix_setElement_INT64(
        NULL if C is None else <GrB_Matrix>C.obj,
        x,
        i,
        j,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_setElement_UINT8_SS(
    Matrix C,
    uint8_t x,
    Index i,
    Index j,
):
    cdef GrB_Info result = GrB_Matrix_setElement_UINT8(
        NULL if C is None else <GrB_Matrix>C.obj,
        x,
        i,
        j,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_setElement_UINT16_SS(
    Matrix C,
    uint16_t x,
    Index i,
    Index j,
):
    cdef GrB_Info result = GrB_Matrix_setElement_UINT16(
        NULL if C is None else <GrB_Matrix>C.obj,
        x,
        i,
        j,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_setElement_UINT32_SS(
    Matrix C,
    uint32_t x,
    Index i,
    Index j,
):
    cdef GrB_Info result = GrB_Matrix_setElement_UINT32(
        NULL if C is None else <GrB_Matrix>C.obj,
        x,
        i,
        j,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_setElement_UINT64_SS(
    Matrix C,
    uint64_t x,
    Index i,
    Index j,
):
    cdef GrB_Info result = GrB_Matrix_setElement_UINT64(
        NULL if C is None else <GrB_Matrix>C.obj,
        x,
        i,
        j,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_wait_SS(
    Matrix A,
):
    cdef GrB_Info result = GrB_Matrix_wait(
        NULL if A is None else <GrB_Matrix*>&A.obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Row_assign_SS(
    Matrix C,
    Vector mask,
    BinaryOp accum,
    Vector u,
    Index i,
    Index *J,
    Index nj,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Row_assign(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if u is None else <GrB_Vector>u.obj,
        i,
        J,
        nj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_apply_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    UnaryOp op,
    Vector u,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_apply(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        NULL if u is None else <GrB_Vector>u.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_apply_BinaryOp1st_BOOL_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    BinaryOp op,
    bint x,
    Vector u,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_apply_BinaryOp1st_BOOL(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        x,
        NULL if u is None else <GrB_Vector>u.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_apply_BinaryOp1st_FP32_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    BinaryOp op,
    float x,
    Vector u,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_apply_BinaryOp1st_FP32(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        x,
        NULL if u is None else <GrB_Vector>u.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_apply_BinaryOp1st_FP64_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    BinaryOp op,
    double x,
    Vector u,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_apply_BinaryOp1st_FP64(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        x,
        NULL if u is None else <GrB_Vector>u.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_apply_BinaryOp1st_INT8_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    BinaryOp op,
    int8_t x,
    Vector u,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_apply_BinaryOp1st_INT8(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        x,
        NULL if u is None else <GrB_Vector>u.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_apply_BinaryOp1st_INT16_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    BinaryOp op,
    int16_t x,
    Vector u,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_apply_BinaryOp1st_INT16(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        x,
        NULL if u is None else <GrB_Vector>u.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_apply_BinaryOp1st_INT32_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    BinaryOp op,
    int32_t x,
    Vector u,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_apply_BinaryOp1st_INT32(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        x,
        NULL if u is None else <GrB_Vector>u.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_apply_BinaryOp1st_INT64_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    BinaryOp op,
    int64_t x,
    Vector u,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_apply_BinaryOp1st_INT64(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        x,
        NULL if u is None else <GrB_Vector>u.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_apply_BinaryOp1st_UINT8_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    BinaryOp op,
    uint8_t x,
    Vector u,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_apply_BinaryOp1st_UINT8(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        x,
        NULL if u is None else <GrB_Vector>u.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_apply_BinaryOp1st_UINT16_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    BinaryOp op,
    uint16_t x,
    Vector u,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_apply_BinaryOp1st_UINT16(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        x,
        NULL if u is None else <GrB_Vector>u.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_apply_BinaryOp1st_UINT32_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    BinaryOp op,
    uint32_t x,
    Vector u,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_apply_BinaryOp1st_UINT32(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        x,
        NULL if u is None else <GrB_Vector>u.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_apply_BinaryOp1st_UINT64_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    BinaryOp op,
    uint64_t x,
    Vector u,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_apply_BinaryOp1st_UINT64(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        x,
        NULL if u is None else <GrB_Vector>u.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_apply_BinaryOp2nd_BOOL_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    BinaryOp op,
    Vector u,
    bint y,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_apply_BinaryOp2nd_BOOL(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        NULL if u is None else <GrB_Vector>u.obj,
        y,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_apply_BinaryOp2nd_FP32_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    BinaryOp op,
    Vector u,
    float y,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_apply_BinaryOp2nd_FP32(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        NULL if u is None else <GrB_Vector>u.obj,
        y,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_apply_BinaryOp2nd_FP64_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    BinaryOp op,
    Vector u,
    double y,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_apply_BinaryOp2nd_FP64(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        NULL if u is None else <GrB_Vector>u.obj,
        y,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_apply_BinaryOp2nd_INT8_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    BinaryOp op,
    Vector u,
    int8_t y,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_apply_BinaryOp2nd_INT8(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        NULL if u is None else <GrB_Vector>u.obj,
        y,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_apply_BinaryOp2nd_INT16_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    BinaryOp op,
    Vector u,
    int16_t y,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_apply_BinaryOp2nd_INT16(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        NULL if u is None else <GrB_Vector>u.obj,
        y,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_apply_BinaryOp2nd_INT32_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    BinaryOp op,
    Vector u,
    int32_t y,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_apply_BinaryOp2nd_INT32(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        NULL if u is None else <GrB_Vector>u.obj,
        y,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_apply_BinaryOp2nd_INT64_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    BinaryOp op,
    Vector u,
    int64_t y,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_apply_BinaryOp2nd_INT64(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        NULL if u is None else <GrB_Vector>u.obj,
        y,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_apply_BinaryOp2nd_UINT8_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    BinaryOp op,
    Vector u,
    uint8_t y,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_apply_BinaryOp2nd_UINT8(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        NULL if u is None else <GrB_Vector>u.obj,
        y,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_apply_BinaryOp2nd_UINT16_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    BinaryOp op,
    Vector u,
    uint16_t y,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_apply_BinaryOp2nd_UINT16(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        NULL if u is None else <GrB_Vector>u.obj,
        y,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_apply_BinaryOp2nd_UINT32_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    BinaryOp op,
    Vector u,
    uint32_t y,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_apply_BinaryOp2nd_UINT32(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        NULL if u is None else <GrB_Vector>u.obj,
        y,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_apply_BinaryOp2nd_UINT64_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    BinaryOp op,
    Vector u,
    uint64_t y,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_apply_BinaryOp2nd_UINT64(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        NULL if u is None else <GrB_Vector>u.obj,
        y,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_assign_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    Vector u,
    Index *I,
    Index ni,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_assign(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if u is None else <GrB_Vector>u.obj,
        I,
        ni,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_assign_BOOL_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    bint x,
    Index *I,
    Index ni,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_assign_BOOL(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_assign_FP32_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    float x,
    Index *I,
    Index ni,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_assign_FP32(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_assign_FP64_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    double x,
    Index *I,
    Index ni,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_assign_FP64(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_assign_INT8_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    int8_t x,
    Index *I,
    Index ni,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_assign_INT8(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_assign_INT16_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    int16_t x,
    Index *I,
    Index ni,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_assign_INT16(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_assign_INT32_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    int32_t x,
    Index *I,
    Index ni,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_assign_INT32(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_assign_INT64_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    int64_t x,
    Index *I,
    Index ni,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_assign_INT64(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_assign_UINT8_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    uint8_t x,
    Index *I,
    Index ni,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_assign_UINT8(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_assign_UINT16_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    uint16_t x,
    Index *I,
    Index ni,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_assign_UINT16(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_assign_UINT32_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    uint32_t x,
    Index *I,
    Index ni,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_assign_UINT32(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_assign_UINT64_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    uint64_t x,
    Index *I,
    Index ni,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_assign_UINT64(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_build_BOOL_SS(
    Vector w,
    Index *I,
    bint *X,
    Index nvals,
    BinaryOp dup,
):
    cdef GrB_Info result = GrB_Vector_build_BOOL(
        NULL if w is None else <GrB_Vector>w.obj,
        I,
        X,
        nvals,
        NULL if dup is None else dup.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_build_FP32_SS(
    Vector w,
    Index *I,
    float *X,
    Index nvals,
    BinaryOp dup,
):
    cdef GrB_Info result = GrB_Vector_build_FP32(
        NULL if w is None else <GrB_Vector>w.obj,
        I,
        X,
        nvals,
        NULL if dup is None else dup.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_build_FP64_SS(
    Vector w,
    Index *I,
    double *X,
    Index nvals,
    BinaryOp dup,
):
    cdef GrB_Info result = GrB_Vector_build_FP64(
        NULL if w is None else <GrB_Vector>w.obj,
        I,
        X,
        nvals,
        NULL if dup is None else dup.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_build_INT8_SS(
    Vector w,
    Index *I,
    int8_t *X,
    Index nvals,
    BinaryOp dup,
):
    cdef GrB_Info result = GrB_Vector_build_INT8(
        NULL if w is None else <GrB_Vector>w.obj,
        I,
        X,
        nvals,
        NULL if dup is None else dup.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_build_INT16_SS(
    Vector w,
    Index *I,
    int16_t *X,
    Index nvals,
    BinaryOp dup,
):
    cdef GrB_Info result = GrB_Vector_build_INT16(
        NULL if w is None else <GrB_Vector>w.obj,
        I,
        X,
        nvals,
        NULL if dup is None else dup.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_build_INT32_SS(
    Vector w,
    Index *I,
    int32_t *X,
    Index nvals,
    BinaryOp dup,
):
    cdef GrB_Info result = GrB_Vector_build_INT32(
        NULL if w is None else <GrB_Vector>w.obj,
        I,
        X,
        nvals,
        NULL if dup is None else dup.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_build_INT64_SS(
    Vector w,
    Index *I,
    int64_t *X,
    Index nvals,
    BinaryOp dup,
):
    cdef GrB_Info result = GrB_Vector_build_INT64(
        NULL if w is None else <GrB_Vector>w.obj,
        I,
        X,
        nvals,
        NULL if dup is None else dup.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_build_UINT8_SS(
    Vector w,
    Index *I,
    uint8_t *X,
    Index nvals,
    BinaryOp dup,
):
    cdef GrB_Info result = GrB_Vector_build_UINT8(
        NULL if w is None else <GrB_Vector>w.obj,
        I,
        X,
        nvals,
        NULL if dup is None else dup.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_build_UINT16_SS(
    Vector w,
    Index *I,
    uint16_t *X,
    Index nvals,
    BinaryOp dup,
):
    cdef GrB_Info result = GrB_Vector_build_UINT16(
        NULL if w is None else <GrB_Vector>w.obj,
        I,
        X,
        nvals,
        NULL if dup is None else dup.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_build_UINT32_SS(
    Vector w,
    Index *I,
    uint32_t *X,
    Index nvals,
    BinaryOp dup,
):
    cdef GrB_Info result = GrB_Vector_build_UINT32(
        NULL if w is None else <GrB_Vector>w.obj,
        I,
        X,
        nvals,
        NULL if dup is None else dup.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_build_UINT64_SS(
    Vector w,
    Index *I,
    uint64_t *X,
    Index nvals,
    BinaryOp dup,
):
    cdef GrB_Info result = GrB_Vector_build_UINT64(
        NULL if w is None else <GrB_Vector>w.obj,
        I,
        X,
        nvals,
        NULL if dup is None else dup.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_clear_SS(
    Vector v,
):
    cdef GrB_Info result = GrB_Vector_clear(
        NULL if v is None else <GrB_Vector>v.obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_dup_SS(
    Vector w,
    Vector u,
):
    cdef GrB_Info result = GrB_Vector_dup(
        NULL if w is None else <GrB_Vector*>&w.obj,
        NULL if u is None else <GrB_Vector>u.obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_eWiseAdd_BinaryOp_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    BinaryOp add,
    Vector u,
    Vector v,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_eWiseAdd_BinaryOp(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if add is None else add.ss_obj,
        NULL if u is None else <GrB_Vector>u.obj,
        NULL if v is None else <GrB_Vector>v.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_eWiseAdd_Monoid_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    Monoid monoid,
    Vector u,
    Vector v,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_eWiseAdd_Monoid(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if monoid is None else monoid.ss_obj,
        NULL if u is None else <GrB_Vector>u.obj,
        NULL if v is None else <GrB_Vector>v.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_eWiseAdd_Semiring_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    Semiring semiring,
    Vector u,
    Vector v,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_eWiseAdd_Semiring(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if semiring is None else semiring.ss_obj,
        NULL if u is None else <GrB_Vector>u.obj,
        NULL if v is None else <GrB_Vector>v.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_eWiseMult_BinaryOp_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    BinaryOp mult,
    Vector u,
    Vector v,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_eWiseMult_BinaryOp(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if mult is None else mult.ss_obj,
        NULL if u is None else <GrB_Vector>u.obj,
        NULL if v is None else <GrB_Vector>v.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_eWiseMult_Monoid_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    Monoid monoid,
    Vector u,
    Vector v,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_eWiseMult_Monoid(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if monoid is None else monoid.ss_obj,
        NULL if u is None else <GrB_Vector>u.obj,
        NULL if v is None else <GrB_Vector>v.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_eWiseMult_Semiring_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    Semiring semiring,
    Vector u,
    Vector v,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_eWiseMult_Semiring(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if semiring is None else semiring.ss_obj,
        NULL if u is None else <GrB_Vector>u.obj,
        NULL if v is None else <GrB_Vector>v.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_extract_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    Vector u,
    Index *I,
    Index ni,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_Vector_extract(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if u is None else <GrB_Vector>u.obj,
        I,
        ni,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_free_SS(
    Vector v,
):
    cdef GrB_Info result = GrB_Vector_free(
        NULL if v is None else <GrB_Vector*>&v.obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_new_SS(
    Vector v,
    Type type,
    Index n,
):
    cdef GrB_Info result = GrB_Vector_new(
        NULL if v is None else <GrB_Vector*>&v.obj,
        NULL if type is None else type.ss_obj,
        n,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_removeElement_SS(
    Vector v,
    Index i,
):
    cdef GrB_Info result = GrB_Vector_removeElement(
        NULL if v is None else <GrB_Vector>v.obj,
        i,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_resize_SS(
    Vector w,
    Index nrows_new,
):
    cdef GrB_Info result = GrB_Vector_resize(
        NULL if w is None else <GrB_Vector>w.obj,
        nrows_new,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_setElement_BOOL_SS(
    Vector w,
    bint x,
    Index i,
):
    cdef GrB_Info result = GrB_Vector_setElement_BOOL(
        NULL if w is None else <GrB_Vector>w.obj,
        x,
        i,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_setElement_FP32_SS(
    Vector w,
    float x,
    Index i,
):
    cdef GrB_Info result = GrB_Vector_setElement_FP32(
        NULL if w is None else <GrB_Vector>w.obj,
        x,
        i,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_setElement_FP64_SS(
    Vector w,
    double x,
    Index i,
):
    cdef GrB_Info result = GrB_Vector_setElement_FP64(
        NULL if w is None else <GrB_Vector>w.obj,
        x,
        i,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_setElement_INT8_SS(
    Vector w,
    int8_t x,
    Index i,
):
    cdef GrB_Info result = GrB_Vector_setElement_INT8(
        NULL if w is None else <GrB_Vector>w.obj,
        x,
        i,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_setElement_INT16_SS(
    Vector w,
    int16_t x,
    Index i,
):
    cdef GrB_Info result = GrB_Vector_setElement_INT16(
        NULL if w is None else <GrB_Vector>w.obj,
        x,
        i,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_setElement_INT32_SS(
    Vector w,
    int32_t x,
    Index i,
):
    cdef GrB_Info result = GrB_Vector_setElement_INT32(
        NULL if w is None else <GrB_Vector>w.obj,
        x,
        i,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_setElement_INT64_SS(
    Vector w,
    int64_t x,
    Index i,
):
    cdef GrB_Info result = GrB_Vector_setElement_INT64(
        NULL if w is None else <GrB_Vector>w.obj,
        x,
        i,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_setElement_UINT8_SS(
    Vector w,
    uint8_t x,
    Index i,
):
    cdef GrB_Info result = GrB_Vector_setElement_UINT8(
        NULL if w is None else <GrB_Vector>w.obj,
        x,
        i,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_setElement_UINT16_SS(
    Vector w,
    uint16_t x,
    Index i,
):
    cdef GrB_Info result = GrB_Vector_setElement_UINT16(
        NULL if w is None else <GrB_Vector>w.obj,
        x,
        i,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_setElement_UINT32_SS(
    Vector w,
    uint32_t x,
    Index i,
):
    cdef GrB_Info result = GrB_Vector_setElement_UINT32(
        NULL if w is None else <GrB_Vector>w.obj,
        x,
        i,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_setElement_UINT64_SS(
    Vector w,
    uint64_t x,
    Index i,
):
    cdef GrB_Info result = GrB_Vector_setElement_UINT64(
        NULL if w is None else <GrB_Vector>w.obj,
        x,
        i,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_wait_SS(
    Vector v,
):
    cdef GrB_Info result = GrB_Vector_wait(
        NULL if v is None else <GrB_Vector*>&v.obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef init_SS(
    Mode mode,
):
    cdef GrB_Info result = GrB_init(
        <GrB_Mode>mode.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef mxm_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    Semiring semiring,
    Matrix A,
    Matrix B,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_mxm(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if semiring is None else semiring.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        NULL if B is None else <GrB_Matrix>B.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef mxv_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    Semiring semiring,
    Matrix A,
    Vector u,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_mxv(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if semiring is None else semiring.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        NULL if u is None else <GrB_Vector>u.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef transpose_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    Matrix A,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_transpose(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef vxm_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    Semiring semiring,
    Vector u,
    Matrix A,
    Descriptor desc,
):
    cdef GrB_Info result = GrB_vxm(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if semiring is None else semiring.ss_obj,
        NULL if u is None else <GrB_Vector>u.obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

# GxB methods
cdef Col_subassign_SS(
    Matrix C,
    Vector mask,
    BinaryOp accum,
    Vector u,
    Index *I,
    Index ni,
    Index j,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Col_subassign(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if u is None else <GrB_Vector>u.obj,
        I,
        ni,
        j,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_apply_BinaryOp1st_FC32_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    BinaryOp op,
    float complex x,
    Matrix A,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Matrix_apply_BinaryOp1st_FC32(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        x,
        NULL if A is None else <GrB_Matrix>A.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_apply_BinaryOp1st_FC64_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    BinaryOp op,
    double complex x,
    Matrix A,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Matrix_apply_BinaryOp1st_FC64(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        x,
        NULL if A is None else <GrB_Matrix>A.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_apply_BinaryOp2nd_FC32_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    BinaryOp op,
    Matrix A,
    float complex y,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Matrix_apply_BinaryOp2nd_FC32(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        y,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_apply_BinaryOp2nd_FC64_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    BinaryOp op,
    Matrix A,
    double complex y,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Matrix_apply_BinaryOp2nd_FC64(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        y,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_assign_FC32_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    float complex x,
    Index *I,
    Index ni,
    Index *J,
    Index nj,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Matrix_assign_FC32(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        J,
        nj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_assign_FC64_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    double complex x,
    Index *I,
    Index ni,
    Index *J,
    Index nj,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Matrix_assign_FC64(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        J,
        nj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_build_FC32_SS(
    Matrix C,
    Index *I,
    Index *J,
    float complex *X,
    Index nvals,
    BinaryOp dup,
):
    cdef GrB_Info result = GxB_Matrix_build_FC32(
        NULL if C is None else <GrB_Matrix>C.obj,
        I,
        J,
        X,
        nvals,
        NULL if dup is None else dup.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_build_FC64_SS(
    Matrix C,
    Index *I,
    Index *J,
    double complex *X,
    Index nvals,
    BinaryOp dup,
):
    cdef GrB_Info result = GxB_Matrix_build_FC64(
        NULL if C is None else <GrB_Matrix>C.obj,
        I,
        J,
        X,
        nvals,
        NULL if dup is None else dup.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_setElement_FC32_SS(
    Matrix C,
    float complex x,
    Index i,
    Index j,
):
    cdef GrB_Info result = GxB_Matrix_setElement_FC32(
        NULL if C is None else <GrB_Matrix>C.obj,
        x,
        i,
        j,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_setElement_FC64_SS(
    Matrix C,
    double complex x,
    Index i,
    Index j,
):
    cdef GrB_Info result = GxB_Matrix_setElement_FC64(
        NULL if C is None else <GrB_Matrix>C.obj,
        x,
        i,
        j,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_subassign_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    Matrix A,
    Index *I,
    Index ni,
    Index *J,
    Index nj,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Matrix_subassign(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        I,
        ni,
        J,
        nj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_subassign_BOOL_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    bint x,
    Index *I,
    Index ni,
    Index *J,
    Index nj,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Matrix_subassign_BOOL(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        J,
        nj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_subassign_FC32_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    float complex x,
    Index *I,
    Index ni,
    Index *J,
    Index nj,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Matrix_subassign_FC32(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        J,
        nj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_subassign_FC64_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    double complex x,
    Index *I,
    Index ni,
    Index *J,
    Index nj,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Matrix_subassign_FC64(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        J,
        nj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_subassign_FP32_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    float x,
    Index *I,
    Index ni,
    Index *J,
    Index nj,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Matrix_subassign_FP32(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        J,
        nj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_subassign_FP64_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    double x,
    Index *I,
    Index ni,
    Index *J,
    Index nj,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Matrix_subassign_FP64(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        J,
        nj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_subassign_INT8_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    int8_t x,
    Index *I,
    Index ni,
    Index *J,
    Index nj,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Matrix_subassign_INT8(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        J,
        nj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_subassign_INT16_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    int16_t x,
    Index *I,
    Index ni,
    Index *J,
    Index nj,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Matrix_subassign_INT16(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        J,
        nj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_subassign_INT32_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    int32_t x,
    Index *I,
    Index ni,
    Index *J,
    Index nj,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Matrix_subassign_INT32(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        J,
        nj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_subassign_INT64_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    int64_t x,
    Index *I,
    Index ni,
    Index *J,
    Index nj,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Matrix_subassign_INT64(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        J,
        nj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_subassign_UINT8_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    uint8_t x,
    Index *I,
    Index ni,
    Index *J,
    Index nj,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Matrix_subassign_UINT8(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        J,
        nj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_subassign_UINT16_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    uint16_t x,
    Index *I,
    Index ni,
    Index *J,
    Index nj,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Matrix_subassign_UINT16(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        J,
        nj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_subassign_UINT32_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    uint32_t x,
    Index *I,
    Index ni,
    Index *J,
    Index nj,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Matrix_subassign_UINT32(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        J,
        nj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Matrix_subassign_UINT64_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    uint64_t x,
    Index *I,
    Index ni,
    Index *J,
    Index nj,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Matrix_subassign_UINT64(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        J,
        nj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Row_subassign_SS(
    Matrix C,
    Vector mask,
    BinaryOp accum,
    Vector u,
    Index i,
    Index *J,
    Index nj,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Row_subassign(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if u is None else <GrB_Vector>u.obj,
        i,
        J,
        nj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_apply_BinaryOp1st_FC32_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    BinaryOp op,
    float complex x,
    Vector u,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Vector_apply_BinaryOp1st_FC32(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        x,
        NULL if u is None else <GrB_Vector>u.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_apply_BinaryOp1st_FC64_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    BinaryOp op,
    double complex x,
    Vector u,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Vector_apply_BinaryOp1st_FC64(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        x,
        NULL if u is None else <GrB_Vector>u.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_apply_BinaryOp2nd_FC32_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    BinaryOp op,
    Vector u,
    float complex y,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Vector_apply_BinaryOp2nd_FC32(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        NULL if u is None else <GrB_Vector>u.obj,
        y,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_apply_BinaryOp2nd_FC64_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    BinaryOp op,
    Vector u,
    double complex y,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Vector_apply_BinaryOp2nd_FC64(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        NULL if u is None else <GrB_Vector>u.obj,
        y,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_assign_FC32_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    float complex x,
    Index *I,
    Index ni,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Vector_assign_FC32(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_assign_FC64_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    double complex x,
    Index *I,
    Index ni,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Vector_assign_FC64(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_build_FC32_SS(
    Vector w,
    Index *I,
    float complex *X,
    Index nvals,
    BinaryOp dup,
):
    cdef GrB_Info result = GxB_Vector_build_FC32(
        NULL if w is None else <GrB_Vector>w.obj,
        I,
        X,
        nvals,
        NULL if dup is None else dup.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_build_FC64_SS(
    Vector w,
    Index *I,
    double complex *X,
    Index nvals,
    BinaryOp dup,
):
    cdef GrB_Info result = GxB_Vector_build_FC64(
        NULL if w is None else <GrB_Vector>w.obj,
        I,
        X,
        nvals,
        NULL if dup is None else dup.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_setElement_FC32_SS(
    Vector w,
    float complex x,
    Index i,
):
    cdef GrB_Info result = GxB_Vector_setElement_FC32(
        NULL if w is None else <GrB_Vector>w.obj,
        x,
        i,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_setElement_FC64_SS(
    Vector w,
    double complex x,
    Index i,
):
    cdef GrB_Info result = GxB_Vector_setElement_FC64(
        NULL if w is None else <GrB_Vector>w.obj,
        x,
        i,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_subassign_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    Vector u,
    Index *I,
    Index ni,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Vector_subassign(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if u is None else <GrB_Vector>u.obj,
        I,
        ni,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_subassign_BOOL_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    bint x,
    Index *I,
    Index ni,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Vector_subassign_BOOL(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_subassign_FC32_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    float complex x,
    Index *I,
    Index ni,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Vector_subassign_FC32(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_subassign_FC64_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    double complex x,
    Index *I,
    Index ni,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Vector_subassign_FC64(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_subassign_FP32_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    float x,
    Index *I,
    Index ni,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Vector_subassign_FP32(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_subassign_FP64_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    double x,
    Index *I,
    Index ni,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Vector_subassign_FP64(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_subassign_INT8_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    int8_t x,
    Index *I,
    Index ni,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Vector_subassign_INT8(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_subassign_INT16_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    int16_t x,
    Index *I,
    Index ni,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Vector_subassign_INT16(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_subassign_INT32_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    int32_t x,
    Index *I,
    Index ni,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Vector_subassign_INT32(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_subassign_INT64_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    int64_t x,
    Index *I,
    Index ni,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Vector_subassign_INT64(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_subassign_UINT8_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    uint8_t x,
    Index *I,
    Index ni,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Vector_subassign_UINT8(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_subassign_UINT16_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    uint16_t x,
    Index *I,
    Index ni,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Vector_subassign_UINT16(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_subassign_UINT32_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    uint32_t x,
    Index *I,
    Index ni,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Vector_subassign_UINT32(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef Vector_subassign_UINT64_SS(
    Vector w,
    Vector mask,
    BinaryOp accum,
    uint64_t x,
    Index *I,
    Index ni,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_Vector_subassign_UINT64(
        NULL if w is None else <GrB_Vector>w.obj,
        NULL if mask is None else <GrB_Vector>mask.obj,
        NULL if accum is None else accum.ss_obj,
        x,
        I,
        ni,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef cuda_init_SS(
    Mode mode,
):
    cdef GrB_Info result = GxB_cuda_init(
        <GrB_Mode>mode.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)

cdef kron_SS(
    Matrix C,
    Matrix Mask,
    BinaryOp accum,
    BinaryOp op,
    Matrix A,
    Matrix B,
    Descriptor desc,
):
    cdef GrB_Info result = GxB_kron(
        NULL if C is None else <GrB_Matrix>C.obj,
        NULL if Mask is None else <GrB_Matrix>Mask.obj,
        NULL if accum is None else accum.ss_obj,
        NULL if op is None else op.ss_obj,
        NULL if A is None else <GrB_Matrix>A.obj,
        NULL if B is None else <GrB_Matrix>B.obj,
        NULL if desc is None else desc.ss_obj,
    )
    if result != GrB_SUCCESS:
        raise ValueError(result)


# GrB methods
Col_assign_ptrs[BACKEND_SS] = Col_assign_SS
Col_extract_ptrs[BACKEND_SS] = Col_extract_SS
Descriptor_set_ptrs[BACKEND_SS] = Descriptor_set_SS
Matrix_apply_ptrs[BACKEND_SS] = Matrix_apply_SS
Matrix_apply_BinaryOp1st_BOOL_ptrs[BACKEND_SS] = Matrix_apply_BinaryOp1st_BOOL_SS
Matrix_apply_BinaryOp1st_FP32_ptrs[BACKEND_SS] = Matrix_apply_BinaryOp1st_FP32_SS
Matrix_apply_BinaryOp1st_FP64_ptrs[BACKEND_SS] = Matrix_apply_BinaryOp1st_FP64_SS
Matrix_apply_BinaryOp1st_INT8_ptrs[BACKEND_SS] = Matrix_apply_BinaryOp1st_INT8_SS
Matrix_apply_BinaryOp1st_INT16_ptrs[BACKEND_SS] = Matrix_apply_BinaryOp1st_INT16_SS
Matrix_apply_BinaryOp1st_INT32_ptrs[BACKEND_SS] = Matrix_apply_BinaryOp1st_INT32_SS
Matrix_apply_BinaryOp1st_INT64_ptrs[BACKEND_SS] = Matrix_apply_BinaryOp1st_INT64_SS
Matrix_apply_BinaryOp1st_UINT8_ptrs[BACKEND_SS] = Matrix_apply_BinaryOp1st_UINT8_SS
Matrix_apply_BinaryOp1st_UINT16_ptrs[BACKEND_SS] = Matrix_apply_BinaryOp1st_UINT16_SS
Matrix_apply_BinaryOp1st_UINT32_ptrs[BACKEND_SS] = Matrix_apply_BinaryOp1st_UINT32_SS
Matrix_apply_BinaryOp1st_UINT64_ptrs[BACKEND_SS] = Matrix_apply_BinaryOp1st_UINT64_SS
Matrix_apply_BinaryOp2nd_BOOL_ptrs[BACKEND_SS] = Matrix_apply_BinaryOp2nd_BOOL_SS
Matrix_apply_BinaryOp2nd_FP32_ptrs[BACKEND_SS] = Matrix_apply_BinaryOp2nd_FP32_SS
Matrix_apply_BinaryOp2nd_FP64_ptrs[BACKEND_SS] = Matrix_apply_BinaryOp2nd_FP64_SS
Matrix_apply_BinaryOp2nd_INT8_ptrs[BACKEND_SS] = Matrix_apply_BinaryOp2nd_INT8_SS
Matrix_apply_BinaryOp2nd_INT16_ptrs[BACKEND_SS] = Matrix_apply_BinaryOp2nd_INT16_SS
Matrix_apply_BinaryOp2nd_INT32_ptrs[BACKEND_SS] = Matrix_apply_BinaryOp2nd_INT32_SS
Matrix_apply_BinaryOp2nd_INT64_ptrs[BACKEND_SS] = Matrix_apply_BinaryOp2nd_INT64_SS
Matrix_apply_BinaryOp2nd_UINT8_ptrs[BACKEND_SS] = Matrix_apply_BinaryOp2nd_UINT8_SS
Matrix_apply_BinaryOp2nd_UINT16_ptrs[BACKEND_SS] = Matrix_apply_BinaryOp2nd_UINT16_SS
Matrix_apply_BinaryOp2nd_UINT32_ptrs[BACKEND_SS] = Matrix_apply_BinaryOp2nd_UINT32_SS
Matrix_apply_BinaryOp2nd_UINT64_ptrs[BACKEND_SS] = Matrix_apply_BinaryOp2nd_UINT64_SS
Matrix_assign_ptrs[BACKEND_SS] = Matrix_assign_SS
Matrix_assign_BOOL_ptrs[BACKEND_SS] = Matrix_assign_BOOL_SS
Matrix_assign_FP32_ptrs[BACKEND_SS] = Matrix_assign_FP32_SS
Matrix_assign_FP64_ptrs[BACKEND_SS] = Matrix_assign_FP64_SS
Matrix_assign_INT8_ptrs[BACKEND_SS] = Matrix_assign_INT8_SS
Matrix_assign_INT16_ptrs[BACKEND_SS] = Matrix_assign_INT16_SS
Matrix_assign_INT32_ptrs[BACKEND_SS] = Matrix_assign_INT32_SS
Matrix_assign_INT64_ptrs[BACKEND_SS] = Matrix_assign_INT64_SS
Matrix_assign_UINT8_ptrs[BACKEND_SS] = Matrix_assign_UINT8_SS
Matrix_assign_UINT16_ptrs[BACKEND_SS] = Matrix_assign_UINT16_SS
Matrix_assign_UINT32_ptrs[BACKEND_SS] = Matrix_assign_UINT32_SS
Matrix_assign_UINT64_ptrs[BACKEND_SS] = Matrix_assign_UINT64_SS
Matrix_build_BOOL_ptrs[BACKEND_SS] = Matrix_build_BOOL_SS
Matrix_build_FP32_ptrs[BACKEND_SS] = Matrix_build_FP32_SS
Matrix_build_FP64_ptrs[BACKEND_SS] = Matrix_build_FP64_SS
Matrix_build_INT8_ptrs[BACKEND_SS] = Matrix_build_INT8_SS
Matrix_build_INT16_ptrs[BACKEND_SS] = Matrix_build_INT16_SS
Matrix_build_INT32_ptrs[BACKEND_SS] = Matrix_build_INT32_SS
Matrix_build_INT64_ptrs[BACKEND_SS] = Matrix_build_INT64_SS
Matrix_build_UINT8_ptrs[BACKEND_SS] = Matrix_build_UINT8_SS
Matrix_build_UINT16_ptrs[BACKEND_SS] = Matrix_build_UINT16_SS
Matrix_build_UINT32_ptrs[BACKEND_SS] = Matrix_build_UINT32_SS
Matrix_build_UINT64_ptrs[BACKEND_SS] = Matrix_build_UINT64_SS
Matrix_clear_ptrs[BACKEND_SS] = Matrix_clear_SS
Matrix_dup_ptrs[BACKEND_SS] = Matrix_dup_SS
Matrix_eWiseAdd_BinaryOp_ptrs[BACKEND_SS] = Matrix_eWiseAdd_BinaryOp_SS
Matrix_eWiseAdd_Monoid_ptrs[BACKEND_SS] = Matrix_eWiseAdd_Monoid_SS
Matrix_eWiseAdd_Semiring_ptrs[BACKEND_SS] = Matrix_eWiseAdd_Semiring_SS
Matrix_eWiseMult_BinaryOp_ptrs[BACKEND_SS] = Matrix_eWiseMult_BinaryOp_SS
Matrix_eWiseMult_Monoid_ptrs[BACKEND_SS] = Matrix_eWiseMult_Monoid_SS
Matrix_eWiseMult_Semiring_ptrs[BACKEND_SS] = Matrix_eWiseMult_Semiring_SS
Matrix_extract_ptrs[BACKEND_SS] = Matrix_extract_SS
Matrix_free_ptrs[BACKEND_SS] = Matrix_free_SS
Matrix_kronecker_BinaryOp_ptrs[BACKEND_SS] = Matrix_kronecker_BinaryOp_SS
Matrix_kronecker_Monoid_ptrs[BACKEND_SS] = Matrix_kronecker_Monoid_SS
Matrix_kronecker_Semiring_ptrs[BACKEND_SS] = Matrix_kronecker_Semiring_SS
Matrix_new_ptrs[BACKEND_SS] = Matrix_new_SS
Matrix_reduce_BinaryOp_ptrs[BACKEND_SS] = Matrix_reduce_BinaryOp_SS
Matrix_reduce_Monoid_ptrs[BACKEND_SS] = Matrix_reduce_Monoid_SS
Matrix_removeElement_ptrs[BACKEND_SS] = Matrix_removeElement_SS
Matrix_resize_ptrs[BACKEND_SS] = Matrix_resize_SS
Matrix_setElement_BOOL_ptrs[BACKEND_SS] = Matrix_setElement_BOOL_SS
Matrix_setElement_FP32_ptrs[BACKEND_SS] = Matrix_setElement_FP32_SS
Matrix_setElement_FP64_ptrs[BACKEND_SS] = Matrix_setElement_FP64_SS
Matrix_setElement_INT8_ptrs[BACKEND_SS] = Matrix_setElement_INT8_SS
Matrix_setElement_INT16_ptrs[BACKEND_SS] = Matrix_setElement_INT16_SS
Matrix_setElement_INT32_ptrs[BACKEND_SS] = Matrix_setElement_INT32_SS
Matrix_setElement_INT64_ptrs[BACKEND_SS] = Matrix_setElement_INT64_SS
Matrix_setElement_UINT8_ptrs[BACKEND_SS] = Matrix_setElement_UINT8_SS
Matrix_setElement_UINT16_ptrs[BACKEND_SS] = Matrix_setElement_UINT16_SS
Matrix_setElement_UINT32_ptrs[BACKEND_SS] = Matrix_setElement_UINT32_SS
Matrix_setElement_UINT64_ptrs[BACKEND_SS] = Matrix_setElement_UINT64_SS
Matrix_wait_ptrs[BACKEND_SS] = Matrix_wait_SS
Row_assign_ptrs[BACKEND_SS] = Row_assign_SS
Vector_apply_ptrs[BACKEND_SS] = Vector_apply_SS
Vector_apply_BinaryOp1st_BOOL_ptrs[BACKEND_SS] = Vector_apply_BinaryOp1st_BOOL_SS
Vector_apply_BinaryOp1st_FP32_ptrs[BACKEND_SS] = Vector_apply_BinaryOp1st_FP32_SS
Vector_apply_BinaryOp1st_FP64_ptrs[BACKEND_SS] = Vector_apply_BinaryOp1st_FP64_SS
Vector_apply_BinaryOp1st_INT8_ptrs[BACKEND_SS] = Vector_apply_BinaryOp1st_INT8_SS
Vector_apply_BinaryOp1st_INT16_ptrs[BACKEND_SS] = Vector_apply_BinaryOp1st_INT16_SS
Vector_apply_BinaryOp1st_INT32_ptrs[BACKEND_SS] = Vector_apply_BinaryOp1st_INT32_SS
Vector_apply_BinaryOp1st_INT64_ptrs[BACKEND_SS] = Vector_apply_BinaryOp1st_INT64_SS
Vector_apply_BinaryOp1st_UINT8_ptrs[BACKEND_SS] = Vector_apply_BinaryOp1st_UINT8_SS
Vector_apply_BinaryOp1st_UINT16_ptrs[BACKEND_SS] = Vector_apply_BinaryOp1st_UINT16_SS
Vector_apply_BinaryOp1st_UINT32_ptrs[BACKEND_SS] = Vector_apply_BinaryOp1st_UINT32_SS
Vector_apply_BinaryOp1st_UINT64_ptrs[BACKEND_SS] = Vector_apply_BinaryOp1st_UINT64_SS
Vector_apply_BinaryOp2nd_BOOL_ptrs[BACKEND_SS] = Vector_apply_BinaryOp2nd_BOOL_SS
Vector_apply_BinaryOp2nd_FP32_ptrs[BACKEND_SS] = Vector_apply_BinaryOp2nd_FP32_SS
Vector_apply_BinaryOp2nd_FP64_ptrs[BACKEND_SS] = Vector_apply_BinaryOp2nd_FP64_SS
Vector_apply_BinaryOp2nd_INT8_ptrs[BACKEND_SS] = Vector_apply_BinaryOp2nd_INT8_SS
Vector_apply_BinaryOp2nd_INT16_ptrs[BACKEND_SS] = Vector_apply_BinaryOp2nd_INT16_SS
Vector_apply_BinaryOp2nd_INT32_ptrs[BACKEND_SS] = Vector_apply_BinaryOp2nd_INT32_SS
Vector_apply_BinaryOp2nd_INT64_ptrs[BACKEND_SS] = Vector_apply_BinaryOp2nd_INT64_SS
Vector_apply_BinaryOp2nd_UINT8_ptrs[BACKEND_SS] = Vector_apply_BinaryOp2nd_UINT8_SS
Vector_apply_BinaryOp2nd_UINT16_ptrs[BACKEND_SS] = Vector_apply_BinaryOp2nd_UINT16_SS
Vector_apply_BinaryOp2nd_UINT32_ptrs[BACKEND_SS] = Vector_apply_BinaryOp2nd_UINT32_SS
Vector_apply_BinaryOp2nd_UINT64_ptrs[BACKEND_SS] = Vector_apply_BinaryOp2nd_UINT64_SS
Vector_assign_ptrs[BACKEND_SS] = Vector_assign_SS
Vector_assign_BOOL_ptrs[BACKEND_SS] = Vector_assign_BOOL_SS
Vector_assign_FP32_ptrs[BACKEND_SS] = Vector_assign_FP32_SS
Vector_assign_FP64_ptrs[BACKEND_SS] = Vector_assign_FP64_SS
Vector_assign_INT8_ptrs[BACKEND_SS] = Vector_assign_INT8_SS
Vector_assign_INT16_ptrs[BACKEND_SS] = Vector_assign_INT16_SS
Vector_assign_INT32_ptrs[BACKEND_SS] = Vector_assign_INT32_SS
Vector_assign_INT64_ptrs[BACKEND_SS] = Vector_assign_INT64_SS
Vector_assign_UINT8_ptrs[BACKEND_SS] = Vector_assign_UINT8_SS
Vector_assign_UINT16_ptrs[BACKEND_SS] = Vector_assign_UINT16_SS
Vector_assign_UINT32_ptrs[BACKEND_SS] = Vector_assign_UINT32_SS
Vector_assign_UINT64_ptrs[BACKEND_SS] = Vector_assign_UINT64_SS
Vector_build_BOOL_ptrs[BACKEND_SS] = Vector_build_BOOL_SS
Vector_build_FP32_ptrs[BACKEND_SS] = Vector_build_FP32_SS
Vector_build_FP64_ptrs[BACKEND_SS] = Vector_build_FP64_SS
Vector_build_INT8_ptrs[BACKEND_SS] = Vector_build_INT8_SS
Vector_build_INT16_ptrs[BACKEND_SS] = Vector_build_INT16_SS
Vector_build_INT32_ptrs[BACKEND_SS] = Vector_build_INT32_SS
Vector_build_INT64_ptrs[BACKEND_SS] = Vector_build_INT64_SS
Vector_build_UINT8_ptrs[BACKEND_SS] = Vector_build_UINT8_SS
Vector_build_UINT16_ptrs[BACKEND_SS] = Vector_build_UINT16_SS
Vector_build_UINT32_ptrs[BACKEND_SS] = Vector_build_UINT32_SS
Vector_build_UINT64_ptrs[BACKEND_SS] = Vector_build_UINT64_SS
Vector_clear_ptrs[BACKEND_SS] = Vector_clear_SS
Vector_dup_ptrs[BACKEND_SS] = Vector_dup_SS
Vector_eWiseAdd_BinaryOp_ptrs[BACKEND_SS] = Vector_eWiseAdd_BinaryOp_SS
Vector_eWiseAdd_Monoid_ptrs[BACKEND_SS] = Vector_eWiseAdd_Monoid_SS
Vector_eWiseAdd_Semiring_ptrs[BACKEND_SS] = Vector_eWiseAdd_Semiring_SS
Vector_eWiseMult_BinaryOp_ptrs[BACKEND_SS] = Vector_eWiseMult_BinaryOp_SS
Vector_eWiseMult_Monoid_ptrs[BACKEND_SS] = Vector_eWiseMult_Monoid_SS
Vector_eWiseMult_Semiring_ptrs[BACKEND_SS] = Vector_eWiseMult_Semiring_SS
Vector_extract_ptrs[BACKEND_SS] = Vector_extract_SS
Vector_free_ptrs[BACKEND_SS] = Vector_free_SS
Vector_new_ptrs[BACKEND_SS] = Vector_new_SS
Vector_removeElement_ptrs[BACKEND_SS] = Vector_removeElement_SS
Vector_resize_ptrs[BACKEND_SS] = Vector_resize_SS
Vector_setElement_BOOL_ptrs[BACKEND_SS] = Vector_setElement_BOOL_SS
Vector_setElement_FP32_ptrs[BACKEND_SS] = Vector_setElement_FP32_SS
Vector_setElement_FP64_ptrs[BACKEND_SS] = Vector_setElement_FP64_SS
Vector_setElement_INT8_ptrs[BACKEND_SS] = Vector_setElement_INT8_SS
Vector_setElement_INT16_ptrs[BACKEND_SS] = Vector_setElement_INT16_SS
Vector_setElement_INT32_ptrs[BACKEND_SS] = Vector_setElement_INT32_SS
Vector_setElement_INT64_ptrs[BACKEND_SS] = Vector_setElement_INT64_SS
Vector_setElement_UINT8_ptrs[BACKEND_SS] = Vector_setElement_UINT8_SS
Vector_setElement_UINT16_ptrs[BACKEND_SS] = Vector_setElement_UINT16_SS
Vector_setElement_UINT32_ptrs[BACKEND_SS] = Vector_setElement_UINT32_SS
Vector_setElement_UINT64_ptrs[BACKEND_SS] = Vector_setElement_UINT64_SS
Vector_wait_ptrs[BACKEND_SS] = Vector_wait_SS
init_ptrs[BACKEND_SS] = init_SS
mxm_ptrs[BACKEND_SS] = mxm_SS
mxv_ptrs[BACKEND_SS] = mxv_SS
transpose_ptrs[BACKEND_SS] = transpose_SS
vxm_ptrs[BACKEND_SS] = vxm_SS

# GxB methods
Col_subassign_ptrs[BACKEND_SS] = Col_subassign_SS
Matrix_apply_BinaryOp1st_FC32_ptrs[BACKEND_SS] = Matrix_apply_BinaryOp1st_FC32_SS
Matrix_apply_BinaryOp1st_FC64_ptrs[BACKEND_SS] = Matrix_apply_BinaryOp1st_FC64_SS
Matrix_apply_BinaryOp2nd_FC32_ptrs[BACKEND_SS] = Matrix_apply_BinaryOp2nd_FC32_SS
Matrix_apply_BinaryOp2nd_FC64_ptrs[BACKEND_SS] = Matrix_apply_BinaryOp2nd_FC64_SS
Matrix_assign_FC32_ptrs[BACKEND_SS] = Matrix_assign_FC32_SS
Matrix_assign_FC64_ptrs[BACKEND_SS] = Matrix_assign_FC64_SS
Matrix_build_FC32_ptrs[BACKEND_SS] = Matrix_build_FC32_SS
Matrix_build_FC64_ptrs[BACKEND_SS] = Matrix_build_FC64_SS
Matrix_setElement_FC32_ptrs[BACKEND_SS] = Matrix_setElement_FC32_SS
Matrix_setElement_FC64_ptrs[BACKEND_SS] = Matrix_setElement_FC64_SS
Matrix_subassign_ptrs[BACKEND_SS] = Matrix_subassign_SS
Matrix_subassign_BOOL_ptrs[BACKEND_SS] = Matrix_subassign_BOOL_SS
Matrix_subassign_FC32_ptrs[BACKEND_SS] = Matrix_subassign_FC32_SS
Matrix_subassign_FC64_ptrs[BACKEND_SS] = Matrix_subassign_FC64_SS
Matrix_subassign_FP32_ptrs[BACKEND_SS] = Matrix_subassign_FP32_SS
Matrix_subassign_FP64_ptrs[BACKEND_SS] = Matrix_subassign_FP64_SS
Matrix_subassign_INT8_ptrs[BACKEND_SS] = <Matrix_subassign_INT8_ptr>Matrix_subassign_INT8_SS
Matrix_subassign_INT16_ptrs[BACKEND_SS] = <Matrix_subassign_INT16_ptr>Matrix_subassign_INT16_SS
Matrix_subassign_INT32_ptrs[BACKEND_SS] = <Matrix_subassign_INT32_ptr>Matrix_subassign_INT32_SS
Matrix_subassign_INT64_ptrs[BACKEND_SS] = <Matrix_subassign_INT64_ptr>Matrix_subassign_INT64_SS
Matrix_subassign_UINT8_ptrs[BACKEND_SS] = <Matrix_subassign_UINT8_ptr>Matrix_subassign_UINT8_SS
Matrix_subassign_UINT16_ptrs[BACKEND_SS] = <Matrix_subassign_UINT16_ptr>Matrix_subassign_UINT16_SS
Matrix_subassign_UINT32_ptrs[BACKEND_SS] = <Matrix_subassign_UINT32_ptr>Matrix_subassign_UINT32_SS
Matrix_subassign_UINT64_ptrs[BACKEND_SS] = <Matrix_subassign_UINT64_ptr>Matrix_subassign_UINT64_SS
Row_subassign_ptrs[BACKEND_SS] = Row_subassign_SS
Vector_apply_BinaryOp1st_FC32_ptrs[BACKEND_SS] = Vector_apply_BinaryOp1st_FC32_SS
Vector_apply_BinaryOp1st_FC64_ptrs[BACKEND_SS] = Vector_apply_BinaryOp1st_FC64_SS
Vector_apply_BinaryOp2nd_FC32_ptrs[BACKEND_SS] = Vector_apply_BinaryOp2nd_FC32_SS
Vector_apply_BinaryOp2nd_FC64_ptrs[BACKEND_SS] = Vector_apply_BinaryOp2nd_FC64_SS
Vector_assign_FC32_ptrs[BACKEND_SS] = Vector_assign_FC32_SS
Vector_assign_FC64_ptrs[BACKEND_SS] = Vector_assign_FC64_SS
Vector_build_FC32_ptrs[BACKEND_SS] = Vector_build_FC32_SS
Vector_build_FC64_ptrs[BACKEND_SS] = Vector_build_FC64_SS
Vector_setElement_FC32_ptrs[BACKEND_SS] = Vector_setElement_FC32_SS
Vector_setElement_FC64_ptrs[BACKEND_SS] = Vector_setElement_FC64_SS
Vector_subassign_ptrs[BACKEND_SS] = Vector_subassign_SS
Vector_subassign_BOOL_ptrs[BACKEND_SS] = Vector_subassign_BOOL_SS
Vector_subassign_FC32_ptrs[BACKEND_SS] = Vector_subassign_FC32_SS
Vector_subassign_FC64_ptrs[BACKEND_SS] = Vector_subassign_FC64_SS
Vector_subassign_FP32_ptrs[BACKEND_SS] = Vector_subassign_FP32_SS
Vector_subassign_FP64_ptrs[BACKEND_SS] = Vector_subassign_FP64_SS
Vector_subassign_INT8_ptrs[BACKEND_SS] = <Vector_subassign_INT8_ptr>Vector_subassign_INT8_SS
Vector_subassign_INT16_ptrs[BACKEND_SS] = <Vector_subassign_INT16_ptr>Vector_subassign_INT16_SS
Vector_subassign_INT32_ptrs[BACKEND_SS] = <Vector_subassign_INT32_ptr>Vector_subassign_INT32_SS
Vector_subassign_INT64_ptrs[BACKEND_SS] = <Vector_subassign_INT64_ptr>Vector_subassign_INT64_SS
Vector_subassign_UINT8_ptrs[BACKEND_SS] = <Vector_subassign_UINT8_ptr>Vector_subassign_UINT8_SS
Vector_subassign_UINT16_ptrs[BACKEND_SS] = <Vector_subassign_UINT16_ptr>Vector_subassign_UINT16_SS
Vector_subassign_UINT32_ptrs[BACKEND_SS] = <Vector_subassign_UINT32_ptr>Vector_subassign_UINT32_SS
Vector_subassign_UINT64_ptrs[BACKEND_SS] = <Vector_subassign_UINT64_ptr>Vector_subassign_UINT64_SS
cuda_init_ptrs[BACKEND_SS] = cuda_init_SS
kron_ptrs[BACKEND_SS] = kron_SS