# This file is automatically generated

cpdef Col_subassign(
    Matrix C,
    Vector mask=None,
    BinaryOp accum=None,
    Vector u=None,
    Index[::1] I=None,
    ni=None,
    j=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError("C argument of Col_subassign must not be None.")
    cdef backend_id_t backend_id = C.backend_id
    cdef Col_subassign_ptr func = Col_subassign_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Col_subassign')
    func(C, mask, accum, u, &I[0], ni, j, desc)

cpdef Matrix_apply_BinaryOp1st_FC32(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    x=None,
    Matrix A=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError("C argument of Matrix_apply_BinaryOp1st_FC32 must not be None.")
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_apply_BinaryOp1st_FC32_ptr func = Matrix_apply_BinaryOp1st_FC32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_apply_BinaryOp1st_FC32')
    func(C, Mask, accum, op, x, A, desc)

cpdef Matrix_apply_BinaryOp1st_FC64(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    x=None,
    Matrix A=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError("C argument of Matrix_apply_BinaryOp1st_FC64 must not be None.")
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_apply_BinaryOp1st_FC64_ptr func = Matrix_apply_BinaryOp1st_FC64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_apply_BinaryOp1st_FC64')
    func(C, Mask, accum, op, x, A, desc)

cpdef Matrix_apply_BinaryOp2nd_FC32(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    Matrix A=None,
    y=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError("C argument of Matrix_apply_BinaryOp2nd_FC32 must not be None.")
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_apply_BinaryOp2nd_FC32_ptr func = Matrix_apply_BinaryOp2nd_FC32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_apply_BinaryOp2nd_FC32')
    func(C, Mask, accum, op, A, y, desc)

cpdef Matrix_apply_BinaryOp2nd_FC64(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    Matrix A=None,
    y=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError("C argument of Matrix_apply_BinaryOp2nd_FC64 must not be None.")
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_apply_BinaryOp2nd_FC64_ptr func = Matrix_apply_BinaryOp2nd_FC64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_apply_BinaryOp2nd_FC64')
    func(C, Mask, accum, op, A, y, desc)

cpdef Matrix_assign_FC32(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Index[::1] J=None,
    nj=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError("C argument of Matrix_assign_FC32 must not be None.")
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_assign_FC32_ptr func = Matrix_assign_FC32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_assign_FC32')
    func(C, Mask, accum, x, &I[0], ni, &J[0], nj, desc)

cpdef Matrix_assign_FC64(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Index[::1] J=None,
    nj=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError("C argument of Matrix_assign_FC64 must not be None.")
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_assign_FC64_ptr func = Matrix_assign_FC64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_assign_FC64')
    func(C, Mask, accum, x, &I[0], ni, &J[0], nj, desc)

cpdef Matrix_build_FC32(
    Matrix C,
    Index[::1] I=None,
    Index[::1] J=None,
    float complex[::1] X=None,
    nvals=None,
    BinaryOp dup=None,
):
    if C is None:
        raise TypeError("C argument of Matrix_build_FC32 must not be None.")
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_build_FC32_ptr func = Matrix_build_FC32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_build_FC32')
    func(C, &I[0], &J[0], &X[0], nvals, dup)

cpdef Matrix_build_FC64(
    Matrix C,
    Index[::1] I=None,
    Index[::1] J=None,
    double complex[::1] X=None,
    nvals=None,
    BinaryOp dup=None,
):
    if C is None:
        raise TypeError("C argument of Matrix_build_FC64 must not be None.")
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_build_FC64_ptr func = Matrix_build_FC64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_build_FC64')
    func(C, &I[0], &J[0], &X[0], nvals, dup)

cpdef Matrix_resize(
    Matrix C,
    nrows_new=None,
    ncols_new=None,
):
    if C is None:
        raise TypeError("C argument of Matrix_resize must not be None.")
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_resize_ptr func = Matrix_resize_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_resize')
    func(C, nrows_new, ncols_new)

cpdef Matrix_setElement_FC32(
    Matrix C,
    x=None,
    i=None,
    j=None,
):
    if C is None:
        raise TypeError("C argument of Matrix_setElement_FC32 must not be None.")
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_setElement_FC32_ptr func = Matrix_setElement_FC32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_setElement_FC32')
    func(C, x, i, j)

cpdef Matrix_setElement_FC64(
    Matrix C,
    x=None,
    i=None,
    j=None,
):
    if C is None:
        raise TypeError("C argument of Matrix_setElement_FC64 must not be None.")
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_setElement_FC64_ptr func = Matrix_setElement_FC64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_setElement_FC64')
    func(C, x, i, j)

cpdef Matrix_subassign(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    Matrix A=None,
    Index[::1] I=None,
    ni=None,
    Index[::1] J=None,
    nj=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError("C argument of Matrix_subassign must not be None.")
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_subassign_ptr func = Matrix_subassign_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_subassign')
    func(C, Mask, accum, A, &I[0], ni, &J[0], nj, desc)

cpdef Matrix_subassign_BOOL(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Index[::1] J=None,
    nj=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError("C argument of Matrix_subassign_BOOL must not be None.")
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_subassign_BOOL_ptr func = Matrix_subassign_BOOL_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_subassign_BOOL')
    func(C, Mask, accum, x, &I[0], ni, &J[0], nj, desc)

cpdef Matrix_subassign_FC32(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Index[::1] J=None,
    nj=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError("C argument of Matrix_subassign_FC32 must not be None.")
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_subassign_FC32_ptr func = Matrix_subassign_FC32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_subassign_FC32')
    func(C, Mask, accum, x, &I[0], ni, &J[0], nj, desc)

cpdef Matrix_subassign_FC64(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Index[::1] J=None,
    nj=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError("C argument of Matrix_subassign_FC64 must not be None.")
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_subassign_FC64_ptr func = Matrix_subassign_FC64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_subassign_FC64')
    func(C, Mask, accum, x, &I[0], ni, &J[0], nj, desc)

cpdef Matrix_subassign_FP32(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Index[::1] J=None,
    nj=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError("C argument of Matrix_subassign_FP32 must not be None.")
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_subassign_FP32_ptr func = Matrix_subassign_FP32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_subassign_FP32')
    func(C, Mask, accum, x, &I[0], ni, &J[0], nj, desc)

cpdef Matrix_subassign_FP64(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Index[::1] J=None,
    nj=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError("C argument of Matrix_subassign_FP64 must not be None.")
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_subassign_FP64_ptr func = Matrix_subassign_FP64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_subassign_FP64')
    func(C, Mask, accum, x, &I[0], ni, &J[0], nj, desc)

cpdef Matrix_subassign_INT8(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Index[::1] J=None,
    nj=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError("C argument of Matrix_subassign_INT8 must not be None.")
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_subassign_INT8_ptr func = Matrix_subassign_INT8_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_subassign_INT8')
    func(C, Mask, accum, x, &I[0], ni, &J[0], nj, desc)

cpdef Matrix_subassign_INT16(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Index[::1] J=None,
    nj=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError("C argument of Matrix_subassign_INT16 must not be None.")
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_subassign_INT16_ptr func = Matrix_subassign_INT16_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_subassign_INT16')
    func(C, Mask, accum, x, &I[0], ni, &J[0], nj, desc)

cpdef Matrix_subassign_INT32(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Index[::1] J=None,
    nj=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError("C argument of Matrix_subassign_INT32 must not be None.")
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_subassign_INT32_ptr func = Matrix_subassign_INT32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_subassign_INT32')
    func(C, Mask, accum, x, &I[0], ni, &J[0], nj, desc)

cpdef Matrix_subassign_INT64(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Index[::1] J=None,
    nj=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError("C argument of Matrix_subassign_INT64 must not be None.")
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_subassign_INT64_ptr func = Matrix_subassign_INT64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_subassign_INT64')
    func(C, Mask, accum, x, &I[0], ni, &J[0], nj, desc)

cpdef Matrix_subassign_UINT8(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Index[::1] J=None,
    nj=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError("C argument of Matrix_subassign_UINT8 must not be None.")
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_subassign_UINT8_ptr func = Matrix_subassign_UINT8_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_subassign_UINT8')
    func(C, Mask, accum, x, &I[0], ni, &J[0], nj, desc)

cpdef Matrix_subassign_UINT16(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Index[::1] J=None,
    nj=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError("C argument of Matrix_subassign_UINT16 must not be None.")
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_subassign_UINT16_ptr func = Matrix_subassign_UINT16_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_subassign_UINT16')
    func(C, Mask, accum, x, &I[0], ni, &J[0], nj, desc)

cpdef Matrix_subassign_UINT32(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Index[::1] J=None,
    nj=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError("C argument of Matrix_subassign_UINT32 must not be None.")
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_subassign_UINT32_ptr func = Matrix_subassign_UINT32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_subassign_UINT32')
    func(C, Mask, accum, x, &I[0], ni, &J[0], nj, desc)

cpdef Matrix_subassign_UINT64(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Index[::1] J=None,
    nj=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError("C argument of Matrix_subassign_UINT64 must not be None.")
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_subassign_UINT64_ptr func = Matrix_subassign_UINT64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_subassign_UINT64')
    func(C, Mask, accum, x, &I[0], ni, &J[0], nj, desc)

cpdef Row_subassign(
    Matrix C,
    Vector mask=None,
    BinaryOp accum=None,
    Vector u=None,
    i=None,
    Index[::1] J=None,
    nj=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError("C argument of Row_subassign must not be None.")
    cdef backend_id_t backend_id = C.backend_id
    cdef Row_subassign_ptr func = Row_subassign_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Row_subassign')
    func(C, mask, accum, u, i, &J[0], nj, desc)

cpdef Vector_apply_BinaryOp1st_FC32(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    x=None,
    Vector u=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError("w argument of Vector_apply_BinaryOp1st_FC32 must not be None.")
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_apply_BinaryOp1st_FC32_ptr func = Vector_apply_BinaryOp1st_FC32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_apply_BinaryOp1st_FC32')
    func(w, mask, accum, op, x, u, desc)

cpdef Vector_apply_BinaryOp1st_FC64(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    x=None,
    Vector u=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError("w argument of Vector_apply_BinaryOp1st_FC64 must not be None.")
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_apply_BinaryOp1st_FC64_ptr func = Vector_apply_BinaryOp1st_FC64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_apply_BinaryOp1st_FC64')
    func(w, mask, accum, op, x, u, desc)

cpdef Vector_apply_BinaryOp2nd_FC32(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    Vector u=None,
    y=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError("w argument of Vector_apply_BinaryOp2nd_FC32 must not be None.")
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_apply_BinaryOp2nd_FC32_ptr func = Vector_apply_BinaryOp2nd_FC32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_apply_BinaryOp2nd_FC32')
    func(w, mask, accum, op, u, y, desc)

cpdef Vector_apply_BinaryOp2nd_FC64(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    Vector u=None,
    y=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError("w argument of Vector_apply_BinaryOp2nd_FC64 must not be None.")
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_apply_BinaryOp2nd_FC64_ptr func = Vector_apply_BinaryOp2nd_FC64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_apply_BinaryOp2nd_FC64')
    func(w, mask, accum, op, u, y, desc)

cpdef Vector_assign_FC32(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError("w argument of Vector_assign_FC32 must not be None.")
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_assign_FC32_ptr func = Vector_assign_FC32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_assign_FC32')
    func(w, mask, accum, x, &I[0], ni, desc)

cpdef Vector_assign_FC64(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError("w argument of Vector_assign_FC64 must not be None.")
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_assign_FC64_ptr func = Vector_assign_FC64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_assign_FC64')
    func(w, mask, accum, x, &I[0], ni, desc)

cpdef Vector_build_FC32(
    Vector w,
    Index[::1] I=None,
    float complex[::1] X=None,
    nvals=None,
    BinaryOp dup=None,
):
    if w is None:
        raise TypeError("w argument of Vector_build_FC32 must not be None.")
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_build_FC32_ptr func = Vector_build_FC32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_build_FC32')
    func(w, &I[0], &X[0], nvals, dup)

cpdef Vector_build_FC64(
    Vector w,
    Index[::1] I=None,
    double complex[::1] X=None,
    nvals=None,
    BinaryOp dup=None,
):
    if w is None:
        raise TypeError("w argument of Vector_build_FC64 must not be None.")
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_build_FC64_ptr func = Vector_build_FC64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_build_FC64')
    func(w, &I[0], &X[0], nvals, dup)

cpdef Vector_resize(
    Vector w,
    nrows_new=None,
):
    if w is None:
        raise TypeError("w argument of Vector_resize must not be None.")
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_resize_ptr func = Vector_resize_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_resize')
    func(w, nrows_new)

cpdef Vector_setElement_FC32(
    Vector w,
    x=None,
    i=None,
):
    if w is None:
        raise TypeError("w argument of Vector_setElement_FC32 must not be None.")
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_setElement_FC32_ptr func = Vector_setElement_FC32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_setElement_FC32')
    func(w, x, i)

cpdef Vector_setElement_FC64(
    Vector w,
    x=None,
    i=None,
):
    if w is None:
        raise TypeError("w argument of Vector_setElement_FC64 must not be None.")
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_setElement_FC64_ptr func = Vector_setElement_FC64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_setElement_FC64')
    func(w, x, i)

cpdef Vector_subassign(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    Vector u=None,
    Index[::1] I=None,
    ni=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError("w argument of Vector_subassign must not be None.")
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_subassign_ptr func = Vector_subassign_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_subassign')
    func(w, mask, accum, u, &I[0], ni, desc)

cpdef Vector_subassign_BOOL(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError("w argument of Vector_subassign_BOOL must not be None.")
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_subassign_BOOL_ptr func = Vector_subassign_BOOL_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_subassign_BOOL')
    func(w, mask, accum, x, &I[0], ni, desc)

cpdef Vector_subassign_FC32(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError("w argument of Vector_subassign_FC32 must not be None.")
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_subassign_FC32_ptr func = Vector_subassign_FC32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_subassign_FC32')
    func(w, mask, accum, x, &I[0], ni, desc)

cpdef Vector_subassign_FC64(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError("w argument of Vector_subassign_FC64 must not be None.")
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_subassign_FC64_ptr func = Vector_subassign_FC64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_subassign_FC64')
    func(w, mask, accum, x, &I[0], ni, desc)

cpdef Vector_subassign_FP32(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError("w argument of Vector_subassign_FP32 must not be None.")
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_subassign_FP32_ptr func = Vector_subassign_FP32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_subassign_FP32')
    func(w, mask, accum, x, &I[0], ni, desc)

cpdef Vector_subassign_FP64(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError("w argument of Vector_subassign_FP64 must not be None.")
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_subassign_FP64_ptr func = Vector_subassign_FP64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_subassign_FP64')
    func(w, mask, accum, x, &I[0], ni, desc)

cpdef Vector_subassign_INT8(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError("w argument of Vector_subassign_INT8 must not be None.")
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_subassign_INT8_ptr func = Vector_subassign_INT8_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_subassign_INT8')
    func(w, mask, accum, x, &I[0], ni, desc)

cpdef Vector_subassign_INT16(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError("w argument of Vector_subassign_INT16 must not be None.")
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_subassign_INT16_ptr func = Vector_subassign_INT16_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_subassign_INT16')
    func(w, mask, accum, x, &I[0], ni, desc)

cpdef Vector_subassign_INT32(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError("w argument of Vector_subassign_INT32 must not be None.")
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_subassign_INT32_ptr func = Vector_subassign_INT32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_subassign_INT32')
    func(w, mask, accum, x, &I[0], ni, desc)

cpdef Vector_subassign_INT64(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError("w argument of Vector_subassign_INT64 must not be None.")
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_subassign_INT64_ptr func = Vector_subassign_INT64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_subassign_INT64')
    func(w, mask, accum, x, &I[0], ni, desc)

cpdef Vector_subassign_UINT8(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError("w argument of Vector_subassign_UINT8 must not be None.")
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_subassign_UINT8_ptr func = Vector_subassign_UINT8_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_subassign_UINT8')
    func(w, mask, accum, x, &I[0], ni, desc)

cpdef Vector_subassign_UINT16(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError("w argument of Vector_subassign_UINT16 must not be None.")
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_subassign_UINT16_ptr func = Vector_subassign_UINT16_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_subassign_UINT16')
    func(w, mask, accum, x, &I[0], ni, desc)

cpdef Vector_subassign_UINT32(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError("w argument of Vector_subassign_UINT32 must not be None.")
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_subassign_UINT32_ptr func = Vector_subassign_UINT32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_subassign_UINT32')
    func(w, mask, accum, x, &I[0], ni, desc)

cpdef Vector_subassign_UINT64(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError("w argument of Vector_subassign_UINT64 must not be None.")
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_subassign_UINT64_ptr func = Vector_subassign_UINT64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_subassign_UINT64')
    func(w, mask, accum, x, &I[0], ni, desc)

cpdef cuda_init(
    Mode mode,
    backend=BACKEND_SS,
):
    cdef backend_id_t backend_id = get_backend(backend)
    cdef cuda_init_ptr func = cuda_init_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have cuda_init')
    func(mode)

cpdef kron(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    Matrix A=None,
    Matrix B=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError("C argument of kron must not be None.")
    cdef backend_id_t backend_id = C.backend_id
    cdef kron_ptr func = kron_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have kron')
    func(C, Mask, accum, op, A, B, desc)