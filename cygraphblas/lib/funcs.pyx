# This file is automatically generated

cpdef Col_assign(
    Matrix C,
    Vector mask=None,
    BinaryOp accum=None,
    Vector u=None,
    Index[::1] I=None,
    ni=None,
    j=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Col_assign_ptr func = Col_assign_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Col_assign')
    func(C, mask, accum, u, &I[0], ni, j, desc)

cpdef Col_extract(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    Matrix A=None,
    Index[::1] I=None,
    ni=None,
    j=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Col_extract_ptr func = Col_extract_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Col_extract')
    func(w, mask, accum, A, &I[0], ni, j, desc)

cpdef Descriptor_set(
    Descriptor desc,
    Desc_Field field=None,
    Desc_Value val=None,
    backend=None,
):
    cdef backend_id_t backend_id = get_backend(backend)
    cdef Descriptor_set_ptr func = Descriptor_set_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Descriptor_set')
    func(desc, field, val)

cpdef Matrix_apply(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    UnaryOp op=None,
    Matrix A=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_apply_ptr func = Matrix_apply_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_apply')
    func(C, Mask, accum, op, A, desc)

cpdef Matrix_apply_BinaryOp1st_BOOL(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    x=None,
    Matrix A=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_apply_BinaryOp1st_BOOL_ptr func = Matrix_apply_BinaryOp1st_BOOL_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_apply_BinaryOp1st_BOOL')
    func(C, Mask, accum, op, x, A, desc)

cpdef Matrix_apply_BinaryOp1st_FP32(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    x=None,
    Matrix A=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_apply_BinaryOp1st_FP32_ptr func = Matrix_apply_BinaryOp1st_FP32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_apply_BinaryOp1st_FP32')
    func(C, Mask, accum, op, x, A, desc)

cpdef Matrix_apply_BinaryOp1st_FP64(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    x=None,
    Matrix A=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_apply_BinaryOp1st_FP64_ptr func = Matrix_apply_BinaryOp1st_FP64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_apply_BinaryOp1st_FP64')
    func(C, Mask, accum, op, x, A, desc)

cpdef Matrix_apply_BinaryOp1st_INT16(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    x=None,
    Matrix A=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_apply_BinaryOp1st_INT16_ptr func = Matrix_apply_BinaryOp1st_INT16_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_apply_BinaryOp1st_INT16')
    func(C, Mask, accum, op, x, A, desc)

cpdef Matrix_apply_BinaryOp1st_INT32(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    x=None,
    Matrix A=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_apply_BinaryOp1st_INT32_ptr func = Matrix_apply_BinaryOp1st_INT32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_apply_BinaryOp1st_INT32')
    func(C, Mask, accum, op, x, A, desc)

cpdef Matrix_apply_BinaryOp1st_INT64(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    x=None,
    Matrix A=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_apply_BinaryOp1st_INT64_ptr func = Matrix_apply_BinaryOp1st_INT64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_apply_BinaryOp1st_INT64')
    func(C, Mask, accum, op, x, A, desc)

cpdef Matrix_apply_BinaryOp1st_INT8(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    x=None,
    Matrix A=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_apply_BinaryOp1st_INT8_ptr func = Matrix_apply_BinaryOp1st_INT8_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_apply_BinaryOp1st_INT8')
    func(C, Mask, accum, op, x, A, desc)

cpdef Matrix_apply_BinaryOp1st_UINT16(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    x=None,
    Matrix A=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_apply_BinaryOp1st_UINT16_ptr func = Matrix_apply_BinaryOp1st_UINT16_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_apply_BinaryOp1st_UINT16')
    func(C, Mask, accum, op, x, A, desc)

cpdef Matrix_apply_BinaryOp1st_UINT32(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    x=None,
    Matrix A=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_apply_BinaryOp1st_UINT32_ptr func = Matrix_apply_BinaryOp1st_UINT32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_apply_BinaryOp1st_UINT32')
    func(C, Mask, accum, op, x, A, desc)

cpdef Matrix_apply_BinaryOp1st_UINT64(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    x=None,
    Matrix A=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_apply_BinaryOp1st_UINT64_ptr func = Matrix_apply_BinaryOp1st_UINT64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_apply_BinaryOp1st_UINT64')
    func(C, Mask, accum, op, x, A, desc)

cpdef Matrix_apply_BinaryOp1st_UINT8(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    x=None,
    Matrix A=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_apply_BinaryOp1st_UINT8_ptr func = Matrix_apply_BinaryOp1st_UINT8_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_apply_BinaryOp1st_UINT8')
    func(C, Mask, accum, op, x, A, desc)

cpdef Matrix_apply_BinaryOp2nd_BOOL(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    Matrix A=None,
    y=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_apply_BinaryOp2nd_BOOL_ptr func = Matrix_apply_BinaryOp2nd_BOOL_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_apply_BinaryOp2nd_BOOL')
    func(C, Mask, accum, op, A, y, desc)

cpdef Matrix_apply_BinaryOp2nd_FP32(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    Matrix A=None,
    y=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_apply_BinaryOp2nd_FP32_ptr func = Matrix_apply_BinaryOp2nd_FP32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_apply_BinaryOp2nd_FP32')
    func(C, Mask, accum, op, A, y, desc)

cpdef Matrix_apply_BinaryOp2nd_FP64(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    Matrix A=None,
    y=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_apply_BinaryOp2nd_FP64_ptr func = Matrix_apply_BinaryOp2nd_FP64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_apply_BinaryOp2nd_FP64')
    func(C, Mask, accum, op, A, y, desc)

cpdef Matrix_apply_BinaryOp2nd_INT16(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    Matrix A=None,
    y=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_apply_BinaryOp2nd_INT16_ptr func = Matrix_apply_BinaryOp2nd_INT16_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_apply_BinaryOp2nd_INT16')
    func(C, Mask, accum, op, A, y, desc)

cpdef Matrix_apply_BinaryOp2nd_INT32(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    Matrix A=None,
    y=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_apply_BinaryOp2nd_INT32_ptr func = Matrix_apply_BinaryOp2nd_INT32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_apply_BinaryOp2nd_INT32')
    func(C, Mask, accum, op, A, y, desc)

cpdef Matrix_apply_BinaryOp2nd_INT64(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    Matrix A=None,
    y=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_apply_BinaryOp2nd_INT64_ptr func = Matrix_apply_BinaryOp2nd_INT64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_apply_BinaryOp2nd_INT64')
    func(C, Mask, accum, op, A, y, desc)

cpdef Matrix_apply_BinaryOp2nd_INT8(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    Matrix A=None,
    y=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_apply_BinaryOp2nd_INT8_ptr func = Matrix_apply_BinaryOp2nd_INT8_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_apply_BinaryOp2nd_INT8')
    func(C, Mask, accum, op, A, y, desc)

cpdef Matrix_apply_BinaryOp2nd_UINT16(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    Matrix A=None,
    y=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_apply_BinaryOp2nd_UINT16_ptr func = Matrix_apply_BinaryOp2nd_UINT16_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_apply_BinaryOp2nd_UINT16')
    func(C, Mask, accum, op, A, y, desc)

cpdef Matrix_apply_BinaryOp2nd_UINT32(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    Matrix A=None,
    y=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_apply_BinaryOp2nd_UINT32_ptr func = Matrix_apply_BinaryOp2nd_UINT32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_apply_BinaryOp2nd_UINT32')
    func(C, Mask, accum, op, A, y, desc)

cpdef Matrix_apply_BinaryOp2nd_UINT64(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    Matrix A=None,
    y=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_apply_BinaryOp2nd_UINT64_ptr func = Matrix_apply_BinaryOp2nd_UINT64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_apply_BinaryOp2nd_UINT64')
    func(C, Mask, accum, op, A, y, desc)

cpdef Matrix_apply_BinaryOp2nd_UINT8(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    Matrix A=None,
    y=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_apply_BinaryOp2nd_UINT8_ptr func = Matrix_apply_BinaryOp2nd_UINT8_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_apply_BinaryOp2nd_UINT8')
    func(C, Mask, accum, op, A, y, desc)

cpdef Matrix_assign(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    Matrix A=None,
    Index[::1] I=None,
    ni=None,
    Index[::1] J=None,
    nj=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_assign_ptr func = Matrix_assign_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_assign')
    func(C, Mask, accum, A, &I[0], ni, &J[0], nj, desc)

cpdef Matrix_assign_BOOL(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Index[::1] J=None,
    nj=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_assign_BOOL_ptr func = Matrix_assign_BOOL_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_assign_BOOL')
    func(C, Mask, accum, x, &I[0], ni, &J[0], nj, desc)

cpdef Matrix_assign_FP32(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Index[::1] J=None,
    nj=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_assign_FP32_ptr func = Matrix_assign_FP32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_assign_FP32')
    func(C, Mask, accum, x, &I[0], ni, &J[0], nj, desc)

cpdef Matrix_assign_FP64(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Index[::1] J=None,
    nj=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_assign_FP64_ptr func = Matrix_assign_FP64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_assign_FP64')
    func(C, Mask, accum, x, &I[0], ni, &J[0], nj, desc)

cpdef Matrix_assign_INT16(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Index[::1] J=None,
    nj=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_assign_INT16_ptr func = Matrix_assign_INT16_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_assign_INT16')
    func(C, Mask, accum, x, &I[0], ni, &J[0], nj, desc)

cpdef Matrix_assign_INT32(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Index[::1] J=None,
    nj=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_assign_INT32_ptr func = Matrix_assign_INT32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_assign_INT32')
    func(C, Mask, accum, x, &I[0], ni, &J[0], nj, desc)

cpdef Matrix_assign_INT64(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Index[::1] J=None,
    nj=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_assign_INT64_ptr func = Matrix_assign_INT64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_assign_INT64')
    func(C, Mask, accum, x, &I[0], ni, &J[0], nj, desc)

cpdef Matrix_assign_INT8(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Index[::1] J=None,
    nj=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_assign_INT8_ptr func = Matrix_assign_INT8_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_assign_INT8')
    func(C, Mask, accum, x, &I[0], ni, &J[0], nj, desc)

cpdef Matrix_assign_UINT16(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Index[::1] J=None,
    nj=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_assign_UINT16_ptr func = Matrix_assign_UINT16_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_assign_UINT16')
    func(C, Mask, accum, x, &I[0], ni, &J[0], nj, desc)

cpdef Matrix_assign_UINT32(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Index[::1] J=None,
    nj=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_assign_UINT32_ptr func = Matrix_assign_UINT32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_assign_UINT32')
    func(C, Mask, accum, x, &I[0], ni, &J[0], nj, desc)

cpdef Matrix_assign_UINT64(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Index[::1] J=None,
    nj=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_assign_UINT64_ptr func = Matrix_assign_UINT64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_assign_UINT64')
    func(C, Mask, accum, x, &I[0], ni, &J[0], nj, desc)

cpdef Matrix_assign_UINT8(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Index[::1] J=None,
    nj=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_assign_UINT8_ptr func = Matrix_assign_UINT8_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_assign_UINT8')
    func(C, Mask, accum, x, &I[0], ni, &J[0], nj, desc)

cpdef Matrix_build_BOOL(
    Matrix C,
    Index[::1] I=None,
    Index[::1] J=None,
    bint[::1] X=None,
    nvals=None,
    BinaryOp dup=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_build_BOOL_ptr func = Matrix_build_BOOL_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_build_BOOL')
    func(C, &I[0], &J[0], &X[0], nvals, dup)

cpdef Matrix_build_FP32(
    Matrix C,
    Index[::1] I=None,
    Index[::1] J=None,
    float[::1] X=None,
    nvals=None,
    BinaryOp dup=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_build_FP32_ptr func = Matrix_build_FP32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_build_FP32')
    func(C, &I[0], &J[0], &X[0], nvals, dup)

cpdef Matrix_build_FP64(
    Matrix C,
    Index[::1] I=None,
    Index[::1] J=None,
    double[::1] X=None,
    nvals=None,
    BinaryOp dup=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_build_FP64_ptr func = Matrix_build_FP64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_build_FP64')
    func(C, &I[0], &J[0], &X[0], nvals, dup)

cpdef Matrix_build_INT16(
    Matrix C,
    Index[::1] I=None,
    Index[::1] J=None,
    int16_t[::1] X=None,
    nvals=None,
    BinaryOp dup=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_build_INT16_ptr func = Matrix_build_INT16_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_build_INT16')
    func(C, &I[0], &J[0], &X[0], nvals, dup)

cpdef Matrix_build_INT32(
    Matrix C,
    Index[::1] I=None,
    Index[::1] J=None,
    int32_t[::1] X=None,
    nvals=None,
    BinaryOp dup=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_build_INT32_ptr func = Matrix_build_INT32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_build_INT32')
    func(C, &I[0], &J[0], &X[0], nvals, dup)

cpdef Matrix_build_INT64(
    Matrix C,
    Index[::1] I=None,
    Index[::1] J=None,
    int64_t[::1] X=None,
    nvals=None,
    BinaryOp dup=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_build_INT64_ptr func = Matrix_build_INT64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_build_INT64')
    func(C, &I[0], &J[0], &X[0], nvals, dup)

cpdef Matrix_build_INT8(
    Matrix C,
    Index[::1] I=None,
    Index[::1] J=None,
    int8_t[::1] X=None,
    nvals=None,
    BinaryOp dup=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_build_INT8_ptr func = Matrix_build_INT8_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_build_INT8')
    func(C, &I[0], &J[0], &X[0], nvals, dup)

cpdef Matrix_build_UINT16(
    Matrix C,
    Index[::1] I=None,
    Index[::1] J=None,
    uint16_t[::1] X=None,
    nvals=None,
    BinaryOp dup=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_build_UINT16_ptr func = Matrix_build_UINT16_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_build_UINT16')
    func(C, &I[0], &J[0], &X[0], nvals, dup)

cpdef Matrix_build_UINT32(
    Matrix C,
    Index[::1] I=None,
    Index[::1] J=None,
    uint32_t[::1] X=None,
    nvals=None,
    BinaryOp dup=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_build_UINT32_ptr func = Matrix_build_UINT32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_build_UINT32')
    func(C, &I[0], &J[0], &X[0], nvals, dup)

cpdef Matrix_build_UINT64(
    Matrix C,
    Index[::1] I=None,
    Index[::1] J=None,
    uint64_t[::1] X=None,
    nvals=None,
    BinaryOp dup=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_build_UINT64_ptr func = Matrix_build_UINT64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_build_UINT64')
    func(C, &I[0], &J[0], &X[0], nvals, dup)

cpdef Matrix_build_UINT8(
    Matrix C,
    Index[::1] I=None,
    Index[::1] J=None,
    uint8_t[::1] X=None,
    nvals=None,
    BinaryOp dup=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_build_UINT8_ptr func = Matrix_build_UINT8_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_build_UINT8')
    func(C, &I[0], &J[0], &X[0], nvals, dup)

cpdef Matrix_clear(
    Matrix A,
):
    if A is None:
        raise TypeError()
    cdef backend_id_t backend_id = A.backend_id
    cdef Matrix_clear_ptr func = Matrix_clear_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_clear')
    func(A)

cpdef Matrix_dup(
    Matrix C,
    Matrix A=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_dup_ptr func = Matrix_dup_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_dup')
    func(C, A)

cpdef Matrix_eWiseAdd_BinaryOp(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    BinaryOp add=None,
    Matrix A=None,
    Matrix B=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_eWiseAdd_BinaryOp_ptr func = Matrix_eWiseAdd_BinaryOp_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_eWiseAdd_BinaryOp')
    func(C, Mask, accum, add, A, B, desc)

cpdef Matrix_eWiseAdd_Monoid(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    Monoid monoid=None,
    Matrix A=None,
    Matrix B=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_eWiseAdd_Monoid_ptr func = Matrix_eWiseAdd_Monoid_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_eWiseAdd_Monoid')
    func(C, Mask, accum, monoid, A, B, desc)

cpdef Matrix_eWiseAdd_Semiring(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    Semiring semiring=None,
    Matrix A=None,
    Matrix B=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_eWiseAdd_Semiring_ptr func = Matrix_eWiseAdd_Semiring_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_eWiseAdd_Semiring')
    func(C, Mask, accum, semiring, A, B, desc)

cpdef Matrix_eWiseMult_BinaryOp(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    BinaryOp mult=None,
    Matrix A=None,
    Matrix B=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_eWiseMult_BinaryOp_ptr func = Matrix_eWiseMult_BinaryOp_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_eWiseMult_BinaryOp')
    func(C, Mask, accum, mult, A, B, desc)

cpdef Matrix_eWiseMult_Monoid(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    Monoid monoid=None,
    Matrix A=None,
    Matrix B=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_eWiseMult_Monoid_ptr func = Matrix_eWiseMult_Monoid_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_eWiseMult_Monoid')
    func(C, Mask, accum, monoid, A, B, desc)

cpdef Matrix_eWiseMult_Semiring(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    Semiring semiring=None,
    Matrix A=None,
    Matrix B=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_eWiseMult_Semiring_ptr func = Matrix_eWiseMult_Semiring_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_eWiseMult_Semiring')
    func(C, Mask, accum, semiring, A, B, desc)

cpdef Matrix_extract(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    Matrix A=None,
    Index[::1] I=None,
    ni=None,
    Index[::1] J=None,
    nj=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_extract_ptr func = Matrix_extract_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_extract')
    func(C, Mask, accum, A, &I[0], ni, &J[0], nj, desc)

cpdef Matrix_free(
    Matrix A,
):
    if A is None:
        raise TypeError()
    cdef backend_id_t backend_id = A.backend_id
    cdef Matrix_free_ptr func = Matrix_free_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_free')
    func(A)

cpdef Matrix_kronecker_BinaryOp(
    Matrix C,
    Matrix M=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    Matrix A=None,
    Matrix B=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_kronecker_BinaryOp_ptr func = Matrix_kronecker_BinaryOp_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_kronecker_BinaryOp')
    func(C, M, accum, op, A, B, desc)

cpdef Matrix_kronecker_Monoid(
    Matrix C,
    Matrix M=None,
    BinaryOp accum=None,
    Monoid monoid=None,
    Matrix A=None,
    Matrix B=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_kronecker_Monoid_ptr func = Matrix_kronecker_Monoid_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_kronecker_Monoid')
    func(C, M, accum, monoid, A, B, desc)

cpdef Matrix_kronecker_Semiring(
    Matrix C,
    Matrix M=None,
    BinaryOp accum=None,
    Semiring semiring=None,
    Matrix A=None,
    Matrix B=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_kronecker_Semiring_ptr func = Matrix_kronecker_Semiring_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_kronecker_Semiring')
    func(C, M, accum, semiring, A, B, desc)

cpdef Matrix_new(
    Matrix A,
    Type type=None,
    nrows=None,
    ncols=None,
):
    if A is None:
        raise TypeError()
    cdef backend_id_t backend_id = A.backend_id
    cdef Matrix_new_ptr func = Matrix_new_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_new')
    func(A, type, nrows, ncols)

cpdef Matrix_reduce_BinaryOp(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    Matrix A=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Matrix_reduce_BinaryOp_ptr func = Matrix_reduce_BinaryOp_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_reduce_BinaryOp')
    func(w, mask, accum, op, A, desc)

cpdef Matrix_reduce_Monoid(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    Monoid monoid=None,
    Matrix A=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Matrix_reduce_Monoid_ptr func = Matrix_reduce_Monoid_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_reduce_Monoid')
    func(w, mask, accum, monoid, A, desc)

cpdef Matrix_removeElement(
    Matrix C,
    i=None,
    j=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_removeElement_ptr func = Matrix_removeElement_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_removeElement')
    func(C, i, j)

cpdef Matrix_resize(
    Matrix C,
    nrows_new=None,
    ncols_new=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_resize_ptr func = Matrix_resize_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_resize')
    func(C, nrows_new, ncols_new)

cpdef Matrix_setElement_BOOL(
    Matrix C,
    x=None,
    i=None,
    j=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_setElement_BOOL_ptr func = Matrix_setElement_BOOL_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_setElement_BOOL')
    func(C, x, i, j)

cpdef Matrix_setElement_FP32(
    Matrix C,
    x=None,
    i=None,
    j=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_setElement_FP32_ptr func = Matrix_setElement_FP32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_setElement_FP32')
    func(C, x, i, j)

cpdef Matrix_setElement_FP64(
    Matrix C,
    x=None,
    i=None,
    j=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_setElement_FP64_ptr func = Matrix_setElement_FP64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_setElement_FP64')
    func(C, x, i, j)

cpdef Matrix_setElement_INT16(
    Matrix C,
    x=None,
    i=None,
    j=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_setElement_INT16_ptr func = Matrix_setElement_INT16_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_setElement_INT16')
    func(C, x, i, j)

cpdef Matrix_setElement_INT32(
    Matrix C,
    x=None,
    i=None,
    j=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_setElement_INT32_ptr func = Matrix_setElement_INT32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_setElement_INT32')
    func(C, x, i, j)

cpdef Matrix_setElement_INT64(
    Matrix C,
    x=None,
    i=None,
    j=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_setElement_INT64_ptr func = Matrix_setElement_INT64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_setElement_INT64')
    func(C, x, i, j)

cpdef Matrix_setElement_INT8(
    Matrix C,
    x=None,
    i=None,
    j=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_setElement_INT8_ptr func = Matrix_setElement_INT8_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_setElement_INT8')
    func(C, x, i, j)

cpdef Matrix_setElement_UINT16(
    Matrix C,
    x=None,
    i=None,
    j=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_setElement_UINT16_ptr func = Matrix_setElement_UINT16_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_setElement_UINT16')
    func(C, x, i, j)

cpdef Matrix_setElement_UINT32(
    Matrix C,
    x=None,
    i=None,
    j=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_setElement_UINT32_ptr func = Matrix_setElement_UINT32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_setElement_UINT32')
    func(C, x, i, j)

cpdef Matrix_setElement_UINT64(
    Matrix C,
    x=None,
    i=None,
    j=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_setElement_UINT64_ptr func = Matrix_setElement_UINT64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_setElement_UINT64')
    func(C, x, i, j)

cpdef Matrix_setElement_UINT8(
    Matrix C,
    x=None,
    i=None,
    j=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Matrix_setElement_UINT8_ptr func = Matrix_setElement_UINT8_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_setElement_UINT8')
    func(C, x, i, j)

cpdef Matrix_wait(
    Matrix A,
):
    if A is None:
        raise TypeError()
    cdef backend_id_t backend_id = A.backend_id
    cdef Matrix_wait_ptr func = Matrix_wait_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Matrix_wait')
    func(A)

cpdef Row_assign(
    Matrix C,
    Vector mask=None,
    BinaryOp accum=None,
    Vector u=None,
    i=None,
    Index[::1] J=None,
    nj=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef Row_assign_ptr func = Row_assign_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Row_assign')
    func(C, mask, accum, u, i, &J[0], nj, desc)

cpdef Vector_apply(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    UnaryOp op=None,
    Vector u=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_apply_ptr func = Vector_apply_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_apply')
    func(w, mask, accum, op, u, desc)

cpdef Vector_apply_BinaryOp1st_BOOL(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    x=None,
    Vector u=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_apply_BinaryOp1st_BOOL_ptr func = Vector_apply_BinaryOp1st_BOOL_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_apply_BinaryOp1st_BOOL')
    func(w, mask, accum, op, x, u, desc)

cpdef Vector_apply_BinaryOp1st_FP32(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    x=None,
    Vector u=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_apply_BinaryOp1st_FP32_ptr func = Vector_apply_BinaryOp1st_FP32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_apply_BinaryOp1st_FP32')
    func(w, mask, accum, op, x, u, desc)

cpdef Vector_apply_BinaryOp1st_FP64(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    x=None,
    Vector u=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_apply_BinaryOp1st_FP64_ptr func = Vector_apply_BinaryOp1st_FP64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_apply_BinaryOp1st_FP64')
    func(w, mask, accum, op, x, u, desc)

cpdef Vector_apply_BinaryOp1st_INT16(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    x=None,
    Vector u=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_apply_BinaryOp1st_INT16_ptr func = Vector_apply_BinaryOp1st_INT16_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_apply_BinaryOp1st_INT16')
    func(w, mask, accum, op, x, u, desc)

cpdef Vector_apply_BinaryOp1st_INT32(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    x=None,
    Vector u=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_apply_BinaryOp1st_INT32_ptr func = Vector_apply_BinaryOp1st_INT32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_apply_BinaryOp1st_INT32')
    func(w, mask, accum, op, x, u, desc)

cpdef Vector_apply_BinaryOp1st_INT64(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    x=None,
    Vector u=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_apply_BinaryOp1st_INT64_ptr func = Vector_apply_BinaryOp1st_INT64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_apply_BinaryOp1st_INT64')
    func(w, mask, accum, op, x, u, desc)

cpdef Vector_apply_BinaryOp1st_INT8(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    x=None,
    Vector u=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_apply_BinaryOp1st_INT8_ptr func = Vector_apply_BinaryOp1st_INT8_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_apply_BinaryOp1st_INT8')
    func(w, mask, accum, op, x, u, desc)

cpdef Vector_apply_BinaryOp1st_UINT16(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    x=None,
    Vector u=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_apply_BinaryOp1st_UINT16_ptr func = Vector_apply_BinaryOp1st_UINT16_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_apply_BinaryOp1st_UINT16')
    func(w, mask, accum, op, x, u, desc)

cpdef Vector_apply_BinaryOp1st_UINT32(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    x=None,
    Vector u=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_apply_BinaryOp1st_UINT32_ptr func = Vector_apply_BinaryOp1st_UINT32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_apply_BinaryOp1st_UINT32')
    func(w, mask, accum, op, x, u, desc)

cpdef Vector_apply_BinaryOp1st_UINT64(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    x=None,
    Vector u=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_apply_BinaryOp1st_UINT64_ptr func = Vector_apply_BinaryOp1st_UINT64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_apply_BinaryOp1st_UINT64')
    func(w, mask, accum, op, x, u, desc)

cpdef Vector_apply_BinaryOp1st_UINT8(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    x=None,
    Vector u=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_apply_BinaryOp1st_UINT8_ptr func = Vector_apply_BinaryOp1st_UINT8_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_apply_BinaryOp1st_UINT8')
    func(w, mask, accum, op, x, u, desc)

cpdef Vector_apply_BinaryOp2nd_BOOL(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    Vector u=None,
    y=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_apply_BinaryOp2nd_BOOL_ptr func = Vector_apply_BinaryOp2nd_BOOL_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_apply_BinaryOp2nd_BOOL')
    func(w, mask, accum, op, u, y, desc)

cpdef Vector_apply_BinaryOp2nd_FP32(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    Vector u=None,
    y=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_apply_BinaryOp2nd_FP32_ptr func = Vector_apply_BinaryOp2nd_FP32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_apply_BinaryOp2nd_FP32')
    func(w, mask, accum, op, u, y, desc)

cpdef Vector_apply_BinaryOp2nd_FP64(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    Vector u=None,
    y=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_apply_BinaryOp2nd_FP64_ptr func = Vector_apply_BinaryOp2nd_FP64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_apply_BinaryOp2nd_FP64')
    func(w, mask, accum, op, u, y, desc)

cpdef Vector_apply_BinaryOp2nd_INT16(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    Vector u=None,
    y=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_apply_BinaryOp2nd_INT16_ptr func = Vector_apply_BinaryOp2nd_INT16_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_apply_BinaryOp2nd_INT16')
    func(w, mask, accum, op, u, y, desc)

cpdef Vector_apply_BinaryOp2nd_INT32(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    Vector u=None,
    y=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_apply_BinaryOp2nd_INT32_ptr func = Vector_apply_BinaryOp2nd_INT32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_apply_BinaryOp2nd_INT32')
    func(w, mask, accum, op, u, y, desc)

cpdef Vector_apply_BinaryOp2nd_INT64(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    Vector u=None,
    y=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_apply_BinaryOp2nd_INT64_ptr func = Vector_apply_BinaryOp2nd_INT64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_apply_BinaryOp2nd_INT64')
    func(w, mask, accum, op, u, y, desc)

cpdef Vector_apply_BinaryOp2nd_INT8(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    Vector u=None,
    y=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_apply_BinaryOp2nd_INT8_ptr func = Vector_apply_BinaryOp2nd_INT8_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_apply_BinaryOp2nd_INT8')
    func(w, mask, accum, op, u, y, desc)

cpdef Vector_apply_BinaryOp2nd_UINT16(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    Vector u=None,
    y=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_apply_BinaryOp2nd_UINT16_ptr func = Vector_apply_BinaryOp2nd_UINT16_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_apply_BinaryOp2nd_UINT16')
    func(w, mask, accum, op, u, y, desc)

cpdef Vector_apply_BinaryOp2nd_UINT32(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    Vector u=None,
    y=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_apply_BinaryOp2nd_UINT32_ptr func = Vector_apply_BinaryOp2nd_UINT32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_apply_BinaryOp2nd_UINT32')
    func(w, mask, accum, op, u, y, desc)

cpdef Vector_apply_BinaryOp2nd_UINT64(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    Vector u=None,
    y=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_apply_BinaryOp2nd_UINT64_ptr func = Vector_apply_BinaryOp2nd_UINT64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_apply_BinaryOp2nd_UINT64')
    func(w, mask, accum, op, u, y, desc)

cpdef Vector_apply_BinaryOp2nd_UINT8(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    BinaryOp op=None,
    Vector u=None,
    y=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_apply_BinaryOp2nd_UINT8_ptr func = Vector_apply_BinaryOp2nd_UINT8_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_apply_BinaryOp2nd_UINT8')
    func(w, mask, accum, op, u, y, desc)

cpdef Vector_assign(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    Vector u=None,
    Index[::1] I=None,
    ni=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_assign_ptr func = Vector_assign_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_assign')
    func(w, mask, accum, u, &I[0], ni, desc)

cpdef Vector_assign_BOOL(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_assign_BOOL_ptr func = Vector_assign_BOOL_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_assign_BOOL')
    func(w, mask, accum, x, &I[0], ni, desc)

cpdef Vector_assign_FP32(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_assign_FP32_ptr func = Vector_assign_FP32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_assign_FP32')
    func(w, mask, accum, x, &I[0], ni, desc)

cpdef Vector_assign_FP64(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_assign_FP64_ptr func = Vector_assign_FP64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_assign_FP64')
    func(w, mask, accum, x, &I[0], ni, desc)

cpdef Vector_assign_INT16(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_assign_INT16_ptr func = Vector_assign_INT16_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_assign_INT16')
    func(w, mask, accum, x, &I[0], ni, desc)

cpdef Vector_assign_INT32(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_assign_INT32_ptr func = Vector_assign_INT32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_assign_INT32')
    func(w, mask, accum, x, &I[0], ni, desc)

cpdef Vector_assign_INT64(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_assign_INT64_ptr func = Vector_assign_INT64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_assign_INT64')
    func(w, mask, accum, x, &I[0], ni, desc)

cpdef Vector_assign_INT8(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_assign_INT8_ptr func = Vector_assign_INT8_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_assign_INT8')
    func(w, mask, accum, x, &I[0], ni, desc)

cpdef Vector_assign_UINT16(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_assign_UINT16_ptr func = Vector_assign_UINT16_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_assign_UINT16')
    func(w, mask, accum, x, &I[0], ni, desc)

cpdef Vector_assign_UINT32(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_assign_UINT32_ptr func = Vector_assign_UINT32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_assign_UINT32')
    func(w, mask, accum, x, &I[0], ni, desc)

cpdef Vector_assign_UINT64(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_assign_UINT64_ptr func = Vector_assign_UINT64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_assign_UINT64')
    func(w, mask, accum, x, &I[0], ni, desc)

cpdef Vector_assign_UINT8(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    x=None,
    Index[::1] I=None,
    ni=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_assign_UINT8_ptr func = Vector_assign_UINT8_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_assign_UINT8')
    func(w, mask, accum, x, &I[0], ni, desc)

cpdef Vector_build_BOOL(
    Vector w,
    Index[::1] I=None,
    bint[::1] X=None,
    nvals=None,
    BinaryOp dup=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_build_BOOL_ptr func = Vector_build_BOOL_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_build_BOOL')
    func(w, &I[0], &X[0], nvals, dup)

cpdef Vector_build_FP32(
    Vector w,
    Index[::1] I=None,
    float[::1] X=None,
    nvals=None,
    BinaryOp dup=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_build_FP32_ptr func = Vector_build_FP32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_build_FP32')
    func(w, &I[0], &X[0], nvals, dup)

cpdef Vector_build_FP64(
    Vector w,
    Index[::1] I=None,
    double[::1] X=None,
    nvals=None,
    BinaryOp dup=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_build_FP64_ptr func = Vector_build_FP64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_build_FP64')
    func(w, &I[0], &X[0], nvals, dup)

cpdef Vector_build_INT16(
    Vector w,
    Index[::1] I=None,
    int16_t[::1] X=None,
    nvals=None,
    BinaryOp dup=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_build_INT16_ptr func = Vector_build_INT16_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_build_INT16')
    func(w, &I[0], &X[0], nvals, dup)

cpdef Vector_build_INT32(
    Vector w,
    Index[::1] I=None,
    int32_t[::1] X=None,
    nvals=None,
    BinaryOp dup=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_build_INT32_ptr func = Vector_build_INT32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_build_INT32')
    func(w, &I[0], &X[0], nvals, dup)

cpdef Vector_build_INT64(
    Vector w,
    Index[::1] I=None,
    int64_t[::1] X=None,
    nvals=None,
    BinaryOp dup=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_build_INT64_ptr func = Vector_build_INT64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_build_INT64')
    func(w, &I[0], &X[0], nvals, dup)

cpdef Vector_build_INT8(
    Vector w,
    Index[::1] I=None,
    int8_t[::1] X=None,
    nvals=None,
    BinaryOp dup=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_build_INT8_ptr func = Vector_build_INT8_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_build_INT8')
    func(w, &I[0], &X[0], nvals, dup)

cpdef Vector_build_UINT16(
    Vector w,
    Index[::1] I=None,
    uint16_t[::1] X=None,
    nvals=None,
    BinaryOp dup=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_build_UINT16_ptr func = Vector_build_UINT16_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_build_UINT16')
    func(w, &I[0], &X[0], nvals, dup)

cpdef Vector_build_UINT32(
    Vector w,
    Index[::1] I=None,
    uint32_t[::1] X=None,
    nvals=None,
    BinaryOp dup=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_build_UINT32_ptr func = Vector_build_UINT32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_build_UINT32')
    func(w, &I[0], &X[0], nvals, dup)

cpdef Vector_build_UINT64(
    Vector w,
    Index[::1] I=None,
    uint64_t[::1] X=None,
    nvals=None,
    BinaryOp dup=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_build_UINT64_ptr func = Vector_build_UINT64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_build_UINT64')
    func(w, &I[0], &X[0], nvals, dup)

cpdef Vector_build_UINT8(
    Vector w,
    Index[::1] I=None,
    uint8_t[::1] X=None,
    nvals=None,
    BinaryOp dup=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_build_UINT8_ptr func = Vector_build_UINT8_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_build_UINT8')
    func(w, &I[0], &X[0], nvals, dup)

cpdef Vector_clear(
    Vector v,
):
    if v is None:
        raise TypeError()
    cdef backend_id_t backend_id = v.backend_id
    cdef Vector_clear_ptr func = Vector_clear_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_clear')
    func(v)

cpdef Vector_dup(
    Vector w,
    Vector u=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_dup_ptr func = Vector_dup_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_dup')
    func(w, u)

cpdef Vector_eWiseAdd_BinaryOp(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    BinaryOp add=None,
    Vector u=None,
    Vector v=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_eWiseAdd_BinaryOp_ptr func = Vector_eWiseAdd_BinaryOp_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_eWiseAdd_BinaryOp')
    func(w, mask, accum, add, u, v, desc)

cpdef Vector_eWiseAdd_Monoid(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    Monoid monoid=None,
    Vector u=None,
    Vector v=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_eWiseAdd_Monoid_ptr func = Vector_eWiseAdd_Monoid_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_eWiseAdd_Monoid')
    func(w, mask, accum, monoid, u, v, desc)

cpdef Vector_eWiseAdd_Semiring(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    Semiring semiring=None,
    Vector u=None,
    Vector v=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_eWiseAdd_Semiring_ptr func = Vector_eWiseAdd_Semiring_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_eWiseAdd_Semiring')
    func(w, mask, accum, semiring, u, v, desc)

cpdef Vector_eWiseMult_BinaryOp(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    BinaryOp mult=None,
    Vector u=None,
    Vector v=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_eWiseMult_BinaryOp_ptr func = Vector_eWiseMult_BinaryOp_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_eWiseMult_BinaryOp')
    func(w, mask, accum, mult, u, v, desc)

cpdef Vector_eWiseMult_Monoid(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    Monoid monoid=None,
    Vector u=None,
    Vector v=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_eWiseMult_Monoid_ptr func = Vector_eWiseMult_Monoid_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_eWiseMult_Monoid')
    func(w, mask, accum, monoid, u, v, desc)

cpdef Vector_eWiseMult_Semiring(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    Semiring semiring=None,
    Vector u=None,
    Vector v=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_eWiseMult_Semiring_ptr func = Vector_eWiseMult_Semiring_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_eWiseMult_Semiring')
    func(w, mask, accum, semiring, u, v, desc)

cpdef Vector_extract(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    Vector u=None,
    Index[::1] I=None,
    ni=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_extract_ptr func = Vector_extract_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_extract')
    func(w, mask, accum, u, &I[0], ni, desc)

cpdef Vector_free(
    Vector v,
):
    if v is None:
        raise TypeError()
    cdef backend_id_t backend_id = v.backend_id
    cdef Vector_free_ptr func = Vector_free_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_free')
    func(v)

cpdef Vector_new(
    Vector v,
    Type type=None,
    n=None,
):
    if v is None:
        raise TypeError()
    cdef backend_id_t backend_id = v.backend_id
    cdef Vector_new_ptr func = Vector_new_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_new')
    func(v, type, n)

cpdef Vector_removeElement(
    Vector v,
    i=None,
):
    if v is None:
        raise TypeError()
    cdef backend_id_t backend_id = v.backend_id
    cdef Vector_removeElement_ptr func = Vector_removeElement_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_removeElement')
    func(v, i)

cpdef Vector_resize(
    Vector w,
    nrows_new=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_resize_ptr func = Vector_resize_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_resize')
    func(w, nrows_new)

cpdef Vector_setElement_BOOL(
    Vector w,
    x=None,
    i=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_setElement_BOOL_ptr func = Vector_setElement_BOOL_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_setElement_BOOL')
    func(w, x, i)

cpdef Vector_setElement_FP32(
    Vector w,
    x=None,
    i=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_setElement_FP32_ptr func = Vector_setElement_FP32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_setElement_FP32')
    func(w, x, i)

cpdef Vector_setElement_FP64(
    Vector w,
    x=None,
    i=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_setElement_FP64_ptr func = Vector_setElement_FP64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_setElement_FP64')
    func(w, x, i)

cpdef Vector_setElement_INT16(
    Vector w,
    x=None,
    i=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_setElement_INT16_ptr func = Vector_setElement_INT16_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_setElement_INT16')
    func(w, x, i)

cpdef Vector_setElement_INT32(
    Vector w,
    x=None,
    i=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_setElement_INT32_ptr func = Vector_setElement_INT32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_setElement_INT32')
    func(w, x, i)

cpdef Vector_setElement_INT64(
    Vector w,
    x=None,
    i=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_setElement_INT64_ptr func = Vector_setElement_INT64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_setElement_INT64')
    func(w, x, i)

cpdef Vector_setElement_INT8(
    Vector w,
    x=None,
    i=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_setElement_INT8_ptr func = Vector_setElement_INT8_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_setElement_INT8')
    func(w, x, i)

cpdef Vector_setElement_UINT16(
    Vector w,
    x=None,
    i=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_setElement_UINT16_ptr func = Vector_setElement_UINT16_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_setElement_UINT16')
    func(w, x, i)

cpdef Vector_setElement_UINT32(
    Vector w,
    x=None,
    i=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_setElement_UINT32_ptr func = Vector_setElement_UINT32_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_setElement_UINT32')
    func(w, x, i)

cpdef Vector_setElement_UINT64(
    Vector w,
    x=None,
    i=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_setElement_UINT64_ptr func = Vector_setElement_UINT64_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_setElement_UINT64')
    func(w, x, i)

cpdef Vector_setElement_UINT8(
    Vector w,
    x=None,
    i=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef Vector_setElement_UINT8_ptr func = Vector_setElement_UINT8_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_setElement_UINT8')
    func(w, x, i)

cpdef Vector_wait(
    Vector v,
):
    if v is None:
        raise TypeError()
    cdef backend_id_t backend_id = v.backend_id
    cdef Vector_wait_ptr func = Vector_wait_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have Vector_wait')
    func(v)

cpdef init(
    Mode mode,
    backend=None,
):
    cdef backend_id_t backend_id = get_backend(backend)
    cdef init_ptr func = init_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have init')
    func(mode)

cpdef mxm(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    Semiring semiring=None,
    Matrix A=None,
    Matrix B=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef mxm_ptr func = mxm_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have mxm')
    func(C, Mask, accum, semiring, A, B, desc)

cpdef mxv(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    Semiring semiring=None,
    Matrix A=None,
    Vector u=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef mxv_ptr func = mxv_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have mxv')
    func(w, mask, accum, semiring, A, u, desc)

cpdef transpose(
    Matrix C,
    Matrix Mask=None,
    BinaryOp accum=None,
    Matrix A=None,
    Descriptor desc=None,
):
    if C is None:
        raise TypeError()
    cdef backend_id_t backend_id = C.backend_id
    cdef transpose_ptr func = transpose_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have transpose')
    func(C, Mask, accum, A, desc)

cpdef vxm(
    Vector w,
    Vector mask=None,
    BinaryOp accum=None,
    Semiring semiring=None,
    Vector u=None,
    Matrix A=None,
    Descriptor desc=None,
):
    if w is None:
        raise TypeError()
    cdef backend_id_t backend_id = w.backend_id
    cdef vxm_ptr func = vxm_ptrs[backend_id]
    if func is NULL:
        raise ValueError(f'{BACKEND_NAMES[backend_id].decode()} backend does not have vxm')
    func(w, mask, accum, semiring, u, A, desc)